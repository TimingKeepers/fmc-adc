///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2004 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor : Xilinx
// \   \   \/     Version : 10.1
//  \   \         Description : Xilinx Functional Simulation Library Component
//  /   /                  10-Gigabit Transceiver
// /___/   /\     Filename : GT10.v
// \   \  /  \    Timestamp : Thu Mar 25 16:42:19 PST 2004
//  \___\/\___\
//
// Revision:
//    03/23/04 - Initial version.
//    02/22/06 - CR#226003 - Added integer, real parameter type

`timescale 1 ps / 1 ps 

module GT10 (
	CHBONDDONE,
	CHBONDO,
	PMARXLOCK,
	RXBUFSTATUS,
	RXCHARISCOMMA,
	RXCHARISK,
	RXCLKCORCNT,
	RXCOMMADET,
	RXDATA,
	RXDISPERR,
	RXLOSSOFSYNC,
	RXNOTINTABLE,
	RXREALIGN,
	RXRECCLK,
	RXRUNDISP,
	TXBUFERR,
	TXKERR,
	TXN,
	TXOUTCLK,
	TXP,
	TXRUNDISP,

	BREFCLKNIN,
	BREFCLKPIN,
	CHBONDI,
	ENCHANSYNC,
	ENMCOMMAALIGN,
	ENPCOMMAALIGN,
	LOOPBACK,
	PMAINIT,
	PMAREGADDR,
	PMAREGDATAIN,
	PMAREGRW,
	PMAREGSTROBE,
	PMARXLOCKSEL,
	POWERDOWN,
	REFCLK,
	REFCLK2,
	REFCLKBSEL,
	REFCLKSEL,
	RXBLOCKSYNC64B66BUSE,
	RXCOMMADETUSE,
	RXDATAWIDTH,
	RXDEC64B66BUSE,
	RXDEC8B10BUSE,
	RXDESCRAM64B66BUSE,
	RXIGNOREBTF,
	RXINTDATAWIDTH,
	RXN,
	RXP,
	RXPOLARITY,
	RXRESET,
	RXSLIDE,
	RXUSRCLK,
	RXUSRCLK2,
	TXBYPASS8B10B,
	TXCHARDISPMODE,
	TXCHARDISPVAL,
	TXCHARISK,
	TXDATA,
	TXDATAWIDTH,
	TXENC64B66BUSE,
	TXENC8B10BUSE,
	TXGEARBOX64B66BUSE,
	TXINHIBIT,
	TXINTDATAWIDTH,
	TXPOLARITY,
	TXRESET,
	TXSCRAM64B66BUSE,
	TXUSRCLK,
	TXUSRCLK2
);

parameter integer ALIGN_COMMA_WORD = 1;
parameter integer CHAN_BOND_LIMIT = 16;
parameter CHAN_BOND_MODE = "OFF";
parameter CHAN_BOND_ONE_SHOT = "FALSE";
parameter CHAN_BOND_SEQ_1_1 = 11'b00000000000;
parameter CHAN_BOND_SEQ_1_2 = 11'b00000000000;
parameter CHAN_BOND_SEQ_1_3 = 11'b00000000000;
parameter CHAN_BOND_SEQ_1_4 = 11'b00000000000;
parameter CHAN_BOND_SEQ_1_MASK = 4'b0000;
parameter CHAN_BOND_SEQ_2_1 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_2 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_3 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_4 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_MASK = 4'b0000;
parameter CHAN_BOND_SEQ_2_USE = "FALSE";
parameter integer CHAN_BOND_SEQ_LEN = 1;
parameter CHAN_BOND_64B66B_SV = "FALSE";
parameter CLK_COR_8B10B_DE = "FALSE";
parameter integer CLK_COR_MAX_LAT = 36;
parameter integer CLK_COR_MIN_LAT = 28;
parameter CLK_COR_SEQ_1_1 = 11'b00000000000;
parameter CLK_COR_SEQ_1_2 = 11'b00000000000;
parameter CLK_COR_SEQ_1_3 = 11'b00000000000;
parameter CLK_COR_SEQ_1_4 = 11'b00000000000;
parameter CLK_COR_SEQ_1_MASK = 4'b0000;
parameter CLK_COR_SEQ_2_1 = 11'b00000000000;
parameter CLK_COR_SEQ_2_2 = 11'b00000000000;
parameter CLK_COR_SEQ_2_3 = 11'b00000000000;
parameter CLK_COR_SEQ_2_4 = 11'b00000000000;
parameter CLK_COR_SEQ_2_MASK = 4'b0000;
parameter CLK_COR_SEQ_2_USE = "FALSE";
parameter CLK_COR_SEQ_DROP = "FALSE";
parameter integer CLK_COR_SEQ_LEN = 1;
parameter CLK_CORRECT_USE = "TRUE";
parameter COMMA_10B_MASK = 10'b0001111111;
parameter DEC_MCOMMA_DETECT = "TRUE";
parameter DEC_PCOMMA_DETECT = "TRUE";
parameter DEC_VALID_COMMA_ONLY = "TRUE";
parameter MCOMMA_10B_VALUE = 10'b1010000011;
parameter MCOMMA_DETECT = "TRUE";
parameter PCOMMA_10B_VALUE = 10'b0101111100;
parameter PCOMMA_DETECT = "TRUE";
parameter PMA_PWR_CNTRL = 8'b11111111;
parameter PMA_SPEED = "0_32";
parameter PMA_SPEED_HEX = 120'h00ffcd24ca1504d00208c9050d4068;
parameter PMA_SPEED_USE = "PMA_SPEED";
parameter RX_BUFFER_USE = "TRUE";
parameter integer RX_LOS_INVALID_INCR = 1;
parameter integer RX_LOS_THRESHOLD = 4;
parameter RX_LOSS_OF_SYNC_FSM = "TRUE";
parameter integer SH_CNT_MAX = 64;
parameter integer SH_INVALID_CNT_MAX = 16;
parameter TX_BUFFER_USE = "TRUE";

output CHBONDDONE;
output [4:0] CHBONDO;
output PMARXLOCK;
output [1:0] RXBUFSTATUS;
output [7:0] RXCHARISCOMMA;
output [7:0] RXCHARISK;
output [2:0] RXCLKCORCNT;
output RXCOMMADET;
output [63:0] RXDATA;
output [7:0] RXDISPERR;
output [1:0] RXLOSSOFSYNC;
output [7:0] RXNOTINTABLE;
output RXREALIGN;
output RXRECCLK;
output [7:0] RXRUNDISP;
output TXBUFERR;
output [7:0] TXKERR;
output TXN;
output TXOUTCLK;
output TXP;
output [7:0] TXRUNDISP;

input BREFCLKNIN;
input BREFCLKPIN;
input [4:0] CHBONDI;
input ENCHANSYNC;
input ENMCOMMAALIGN;
input ENPCOMMAALIGN;
input [1:0] LOOPBACK;
input PMAINIT;
input [5:0] PMAREGADDR;
input [7:0] PMAREGDATAIN;
input PMAREGRW;
input PMAREGSTROBE;
input [1:0] PMARXLOCKSEL;
input POWERDOWN;
input REFCLK;
input REFCLK2;
input REFCLKBSEL;
input REFCLKSEL;
input RXBLOCKSYNC64B66BUSE;
input RXCOMMADETUSE;
input [1:0] RXDATAWIDTH;
input RXDEC64B66BUSE;
input RXDEC8B10BUSE;
input RXDESCRAM64B66BUSE;
input RXIGNOREBTF;
input [1:0] RXINTDATAWIDTH;
input RXN;
input RXP;
input RXPOLARITY;
input RXRESET;
input RXSLIDE;
input RXUSRCLK;
input RXUSRCLK2;
input [7:0] TXBYPASS8B10B;
input [7:0] TXCHARDISPMODE;
input [7:0] TXCHARDISPVAL;
input [7:0] TXCHARISK;
input [63:0] TXDATA;
input [1:0] TXDATAWIDTH;
input TXENC64B66BUSE;
input TXENC8B10BUSE;
input TXGEARBOX64B66BUSE;
input TXINHIBIT;
input [1:0] TXINTDATAWIDTH;
input TXPOLARITY;
input TXRESET;
input TXSCRAM64B66BUSE;
input TXUSRCLK;
input TXUSRCLK2;

reg [1:0] ALIGN_COMMA_WORD_BINARY;
reg [5:0] CHAN_BOND_LIMIT_BINARY;
reg [1:0] CHAN_BOND_MODE_BINARY;
reg CHAN_BOND_ONE_SHOT_BINARY;
reg CHAN_BOND_SEQ_2_USE_BINARY;
reg [2:0] CHAN_BOND_SEQ_LEN_BINARY;
reg CHAN_BOND_64B66B_SV_BINARY;
reg CLK_COR_8B10B_DE_BINARY;
reg [5:0] CLK_COR_MAX_LAT_BINARY;
reg [5:0] CLK_COR_MIN_LAT_BINARY;
reg CLK_COR_SEQ_2_USE_BINARY;
reg CLK_COR_SEQ_DROP_BINARY;
reg [2:0] CLK_COR_SEQ_LEN_BINARY;
reg CLK_CORRECT_USE_BINARY;
reg DEC_MCOMMA_DETECT_BINARY;
reg DEC_PCOMMA_DETECT_BINARY;
reg DEC_VALID_COMMA_ONLY_BINARY;
reg MCOMMA_DETECT_BINARY;
reg PCOMMA_DETECT_BINARY;
reg [119:0] PMA_SPEED_BINARY;
reg PMA_SPEED_USE_BINARY;
reg RX_BUFFER_USE_BINARY;
reg [7:0] RX_LOS_INVALID_INCR_BINARY;
reg [7:0] RX_LOS_THRESHOLD_BINARY;
reg RX_LOSS_OF_SYNC_FSM_BINARY;
reg [7:0] SH_CNT_MAX_BINARY;
reg [7:0] SH_INVALID_CNT_MAX_BINARY;
reg TX_BUFFER_USE_BINARY;

tri0 GSR = glbl.GSR;

reg notifier;

wire CHBONDDONE_OUT;
wire [4:0] CHBONDO_OUT;
wire PMARXLOCK_OUT;
wire [1:0] RXBUFSTATUS_OUT;
wire [7:0] RXCHARISCOMMA_OUT;
wire [7:0] RXCHARISK_OUT;
wire [2:0] RXCLKCORCNT_OUT;
wire RXCOMMADET_OUT;
wire [63:0] RXDATA_OUT;
wire [7:0] RXDISPERR_OUT;
wire [1:0] RXLOSSOFSYNC_OUT;
wire [7:0] RXNOTINTABLE_OUT;
wire RXREALIGN_OUT;
wire RXRECCLK_OUT;
wire [7:0] RXRUNDISP_OUT;
wire TXBUFERR_OUT;
wire [7:0] TXKERR_OUT;
// wire TXN_OUT;
wire TXOUTCLK_OUT;
// wire TXP_OUT;
wire [7:0] TXRUNDISP_OUT;
wire BREFCLKNIN_IN;
wire BREFCLKPIN_IN;
wire [4:0] CHBONDI_IN;
wire ENCHANSYNC_IN;
wire ENMCOMMAALIGN_IN;
wire ENPCOMMAALIGN_IN;
wire [1:0] LOOPBACK_IN;
wire PMAINIT_IN;
wire [5:0] PMAREGADDR_IN;
wire [7:0] PMAREGDATAIN_IN;
wire PMAREGRW_IN;
wire PMAREGSTROBE_IN;
wire [1:0] PMARXLOCKSEL_IN;
wire POWERDOWN_IN;
wire REFCLK_IN;
wire REFCLK2_IN;
wire REFCLKBSEL_IN;
wire REFCLKSEL_IN;
wire RXBLOCKSYNC64B66BUSE_IN;
wire RXCOMMADETUSE_IN;
wire [1:0] RXDATAWIDTH_IN;
wire RXDEC64B66BUSE_IN;
wire RXDEC8B10BUSE_IN;
wire RXDESCRAM64B66BUSE_IN;
wire RXIGNOREBTF_IN;
wire [1:0] RXINTDATAWIDTH_IN;
wire RXN_IN;
wire RXP_IN;
wire RXPOLARITY_IN;
wire RXRESET_IN;
wire RXSLIDE_IN;
wire RXUSRCLK_IN;
wire RXUSRCLK2_IN;
wire [7:0] TXBYPASS8B10B_IN;
wire [7:0] TXCHARDISPMODE_IN;
wire [7:0] TXCHARDISPVAL_IN;
wire [7:0] TXCHARISK_IN;
wire [63:0] TXDATA_IN;
wire [1:0] TXDATAWIDTH_IN;
wire TXENC64B66BUSE_IN;
wire TXENC8B10BUSE_IN;
wire TXGEARBOX64B66BUSE_IN;
wire TXINHIBIT_IN;
wire [1:0] TXINTDATAWIDTH_IN;
wire TXPOLARITY_IN;
wire TXRESET_IN;
wire TXSCRAM64B66BUSE_IN;
wire TXUSRCLK_IN;
wire TXUSRCLK2_IN;

initial begin
	case (ALIGN_COMMA_WORD)
		1 : ALIGN_COMMA_WORD_BINARY <= 2'b00;
		2 : ALIGN_COMMA_WORD_BINARY <= 2'b01;
		4 : ALIGN_COMMA_WORD_BINARY <= 2'b10;
		default : begin
			$display("Attribute Syntax Error : The Attribute ALIGN_COMMA_WORD on GT10 instance %m is set to %d.  Legal values for this attribute are 1, 2 or 4.", ALIGN_COMMA_WORD);
			$finish;
		end
	endcase

	case (CHAN_BOND_LIMIT)
		0 : CHAN_BOND_LIMIT_BINARY <= 6'b000000;
		1 : CHAN_BOND_LIMIT_BINARY <= 6'b000001;
		2 : CHAN_BOND_LIMIT_BINARY <= 6'b000010;
		3 : CHAN_BOND_LIMIT_BINARY <= 6'b000011;
		4 : CHAN_BOND_LIMIT_BINARY <= 6'b000100;
		5 : CHAN_BOND_LIMIT_BINARY <= 6'b000101;
		6 : CHAN_BOND_LIMIT_BINARY <= 6'b000110;
		7 : CHAN_BOND_LIMIT_BINARY <= 6'b000111;
		8 : CHAN_BOND_LIMIT_BINARY <= 6'b001000;
		9 : CHAN_BOND_LIMIT_BINARY <= 6'b001001;
		10 : CHAN_BOND_LIMIT_BINARY <= 6'b001010;
		11 : CHAN_BOND_LIMIT_BINARY <= 6'b001011;
		12 : CHAN_BOND_LIMIT_BINARY <= 6'b001100;
		13 : CHAN_BOND_LIMIT_BINARY <= 6'b001101;
		14 : CHAN_BOND_LIMIT_BINARY <= 6'b001110;
		15 : CHAN_BOND_LIMIT_BINARY <= 6'b001111;
		16 : CHAN_BOND_LIMIT_BINARY <= 6'b010000;
		17 : CHAN_BOND_LIMIT_BINARY <= 6'b010001;
		18 : CHAN_BOND_LIMIT_BINARY <= 6'b010010;
		19 : CHAN_BOND_LIMIT_BINARY <= 6'b010011;
		20 : CHAN_BOND_LIMIT_BINARY <= 6'b010100;
		21 : CHAN_BOND_LIMIT_BINARY <= 6'b010101;
		22 : CHAN_BOND_LIMIT_BINARY <= 6'b010110;
		23 : CHAN_BOND_LIMIT_BINARY <= 6'b010111;
		24 : CHAN_BOND_LIMIT_BINARY <= 6'b011000;
		25 : CHAN_BOND_LIMIT_BINARY <= 6'b011001;
		26 : CHAN_BOND_LIMIT_BINARY <= 6'b011010;
		27 : CHAN_BOND_LIMIT_BINARY <= 6'b011011;
		28 : CHAN_BOND_LIMIT_BINARY <= 6'b011100;
		29 : CHAN_BOND_LIMIT_BINARY <= 6'b011101;
		30 : CHAN_BOND_LIMIT_BINARY <= 6'b011110;
		31 : CHAN_BOND_LIMIT_BINARY <= 6'b011111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_LIMIT on GT10 instance %m is set to %d.  Legal values for this attribute are 0 to 31.", CHAN_BOND_LIMIT);
			$finish;
		end
	endcase

	case (CHAN_BOND_MODE)
		"OFF" : CHAN_BOND_MODE_BINARY <= 2'b00;
		"MASTER" : CHAN_BOND_MODE_BINARY <= 2'b01;
		"SLAVE_1_HOP" : CHAN_BOND_MODE_BINARY <= 2'b10;
		"SLAVE_2_HOPS" : CHAN_BOND_MODE_BINARY <= 2'b11;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_MODE on GT10 instance %m is set to %s.  Legal values for this attribute are OFF, MASTER, SLAVE_1_HOP or SLAVE_2_HOPS.", CHAN_BOND_MODE);
			$finish;
		end
	endcase

	case (CHAN_BOND_ONE_SHOT)
		"FALSE" : CHAN_BOND_ONE_SHOT_BINARY <= 0;
		"TRUE" : CHAN_BOND_ONE_SHOT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_ONE_SHOT on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CHAN_BOND_ONE_SHOT);
			$finish;
		end
	endcase

	case (CHAN_BOND_SEQ_2_USE)
		"FALSE" : CHAN_BOND_SEQ_2_USE_BINARY <= 0;
		"TRUE" : CHAN_BOND_SEQ_2_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_SEQ_2_USE on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CHAN_BOND_SEQ_2_USE);
			$finish;
		end
	endcase

	case (CHAN_BOND_SEQ_LEN)
		1 : CHAN_BOND_SEQ_LEN_BINARY <= 3'b000;
		2 : CHAN_BOND_SEQ_LEN_BINARY <= 3'b001;
		3 : CHAN_BOND_SEQ_LEN_BINARY <= 3'b010;
		4 : CHAN_BOND_SEQ_LEN_BINARY <= 3'b011;
		8 : CHAN_BOND_SEQ_LEN_BINARY <= 3'b111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_SEQ_LEN on GT10 instance %m is set to %d.  Legal values for this attribute are 1, 2, 3, 4 or 8.", CHAN_BOND_SEQ_LEN);
			$finish;
		end
	endcase

	case (CHAN_BOND_64B66B_SV)
		"FALSE" : CHAN_BOND_64B66B_SV_BINARY <= 0;
		"TRUE" : CHAN_BOND_64B66B_SV_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_64B66B_SV on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CHAN_BOND_64B66B_SV);
			$finish;
		end
	endcase

	case (CLK_COR_8B10B_DE)
		"FALSE" : CLK_COR_8B10B_DE_BINARY <= 0;
		"TRUE" : CLK_COR_8B10B_DE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_8B10B_DE on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_COR_8B10B_DE);
			$finish;
		end
	endcase

	case (CLK_COR_MAX_LAT)
		0 : CLK_COR_MAX_LAT_BINARY <= 6'b000000;
		1 : CLK_COR_MAX_LAT_BINARY <= 6'b000001;
		2 : CLK_COR_MAX_LAT_BINARY <= 6'b000010;
		3 : CLK_COR_MAX_LAT_BINARY <= 6'b000011;
		4 : CLK_COR_MAX_LAT_BINARY <= 6'b000100;
		5 : CLK_COR_MAX_LAT_BINARY <= 6'b000101;
		6 : CLK_COR_MAX_LAT_BINARY <= 6'b000110;
		7 : CLK_COR_MAX_LAT_BINARY <= 6'b000111;
		8 : CLK_COR_MAX_LAT_BINARY <= 6'b001000;
		9 : CLK_COR_MAX_LAT_BINARY <= 6'b001001;
		10 : CLK_COR_MAX_LAT_BINARY <= 6'b001010;
		11 : CLK_COR_MAX_LAT_BINARY <= 6'b001011;
		12 : CLK_COR_MAX_LAT_BINARY <= 6'b001100;
		13 : CLK_COR_MAX_LAT_BINARY <= 6'b001101;
		14 : CLK_COR_MAX_LAT_BINARY <= 6'b001110;
		15 : CLK_COR_MAX_LAT_BINARY <= 6'b001111;
		16 : CLK_COR_MAX_LAT_BINARY <= 6'b010000;
		17 : CLK_COR_MAX_LAT_BINARY <= 6'b010001;
		18 : CLK_COR_MAX_LAT_BINARY <= 6'b010010;
		19 : CLK_COR_MAX_LAT_BINARY <= 6'b010011;
		20 : CLK_COR_MAX_LAT_BINARY <= 6'b010100;
		21 : CLK_COR_MAX_LAT_BINARY <= 6'b010101;
		22 : CLK_COR_MAX_LAT_BINARY <= 6'b010110;
		23 : CLK_COR_MAX_LAT_BINARY <= 6'b010111;
		24 : CLK_COR_MAX_LAT_BINARY <= 6'b011000;
		25 : CLK_COR_MAX_LAT_BINARY <= 6'b011001;
		26 : CLK_COR_MAX_LAT_BINARY <= 6'b011010;
		27 : CLK_COR_MAX_LAT_BINARY <= 6'b011011;
		28 : CLK_COR_MAX_LAT_BINARY <= 6'b011100;
		29 : CLK_COR_MAX_LAT_BINARY <= 6'b011101;
		30 : CLK_COR_MAX_LAT_BINARY <= 6'b011110;
		31 : CLK_COR_MAX_LAT_BINARY <= 6'b011111;
		32 : CLK_COR_MAX_LAT_BINARY <= 6'b100000;
		33 : CLK_COR_MAX_LAT_BINARY <= 6'b100001;
		34 : CLK_COR_MAX_LAT_BINARY <= 6'b100010;
		35 : CLK_COR_MAX_LAT_BINARY <= 6'b100011;
		36 : CLK_COR_MAX_LAT_BINARY <= 6'b100100;
		37 : CLK_COR_MAX_LAT_BINARY <= 6'b100101;
		38 : CLK_COR_MAX_LAT_BINARY <= 6'b100110;
		39 : CLK_COR_MAX_LAT_BINARY <= 6'b100111;
		40 : CLK_COR_MAX_LAT_BINARY <= 6'b101000;
		41 : CLK_COR_MAX_LAT_BINARY <= 6'b101001;
		42 : CLK_COR_MAX_LAT_BINARY <= 6'b101010;
		43 : CLK_COR_MAX_LAT_BINARY <= 6'b101011;
		44 : CLK_COR_MAX_LAT_BINARY <= 6'b101100;
		45 : CLK_COR_MAX_LAT_BINARY <= 6'b101101;
		46 : CLK_COR_MAX_LAT_BINARY <= 6'b101110;
		47 : CLK_COR_MAX_LAT_BINARY <= 6'b101111;
		48 : CLK_COR_MAX_LAT_BINARY <= 6'b110000;
		49 : CLK_COR_MAX_LAT_BINARY <= 6'b110001;
		50 : CLK_COR_MAX_LAT_BINARY <= 6'b110010;
		51 : CLK_COR_MAX_LAT_BINARY <= 6'b110011;
		52 : CLK_COR_MAX_LAT_BINARY <= 6'b110100;
		53 : CLK_COR_MAX_LAT_BINARY <= 6'b110101;
		54 : CLK_COR_MAX_LAT_BINARY <= 6'b110110;
		55 : CLK_COR_MAX_LAT_BINARY <= 6'b110111;
		56 : CLK_COR_MAX_LAT_BINARY <= 6'b111000;
		57 : CLK_COR_MAX_LAT_BINARY <= 6'b111001;
		58 : CLK_COR_MAX_LAT_BINARY <= 6'b111010;
		59 : CLK_COR_MAX_LAT_BINARY <= 6'b111011;
		60 : CLK_COR_MAX_LAT_BINARY <= 6'b111100;
		61 : CLK_COR_MAX_LAT_BINARY <= 6'b111101;
		62 : CLK_COR_MAX_LAT_BINARY <= 6'b111110;
		63 : CLK_COR_MAX_LAT_BINARY <= 6'b111111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_MAX_LAT on GT10 instance %m is set to %d.  Legal values for this attribute are 0 to 63.", CLK_COR_MAX_LAT);
			$finish;
		end
	endcase

	case (CLK_COR_MIN_LAT)
		0 : CLK_COR_MIN_LAT_BINARY <= 6'b000000;
		1 : CLK_COR_MIN_LAT_BINARY <= 6'b000001;
		2 : CLK_COR_MIN_LAT_BINARY <= 6'b000010;
		3 : CLK_COR_MIN_LAT_BINARY <= 6'b000011;
		4 : CLK_COR_MIN_LAT_BINARY <= 6'b000100;
		5 : CLK_COR_MIN_LAT_BINARY <= 6'b000101;
		6 : CLK_COR_MIN_LAT_BINARY <= 6'b000110;
		7 : CLK_COR_MIN_LAT_BINARY <= 6'b000111;
		8 : CLK_COR_MIN_LAT_BINARY <= 6'b001000;
		9 : CLK_COR_MIN_LAT_BINARY <= 6'b001001;
		10 : CLK_COR_MIN_LAT_BINARY <= 6'b001010;
		11 : CLK_COR_MIN_LAT_BINARY <= 6'b001011;
		12 : CLK_COR_MIN_LAT_BINARY <= 6'b001100;
		13 : CLK_COR_MIN_LAT_BINARY <= 6'b001101;
		14 : CLK_COR_MIN_LAT_BINARY <= 6'b001110;
		15 : CLK_COR_MIN_LAT_BINARY <= 6'b001111;
		16 : CLK_COR_MIN_LAT_BINARY <= 6'b010000;
		17 : CLK_COR_MIN_LAT_BINARY <= 6'b010001;
		18 : CLK_COR_MIN_LAT_BINARY <= 6'b010010;
		19 : CLK_COR_MIN_LAT_BINARY <= 6'b010011;
		20 : CLK_COR_MIN_LAT_BINARY <= 6'b010100;
		21 : CLK_COR_MIN_LAT_BINARY <= 6'b010101;
		22 : CLK_COR_MIN_LAT_BINARY <= 6'b010110;
		23 : CLK_COR_MIN_LAT_BINARY <= 6'b010111;
		24 : CLK_COR_MIN_LAT_BINARY <= 6'b011000;
		25 : CLK_COR_MIN_LAT_BINARY <= 6'b011001;
		26 : CLK_COR_MIN_LAT_BINARY <= 6'b011010;
		27 : CLK_COR_MIN_LAT_BINARY <= 6'b011011;
		28 : CLK_COR_MIN_LAT_BINARY <= 6'b011100;
		29 : CLK_COR_MIN_LAT_BINARY <= 6'b011101;
		30 : CLK_COR_MIN_LAT_BINARY <= 6'b011110;
		31 : CLK_COR_MIN_LAT_BINARY <= 6'b011111;
		32 : CLK_COR_MIN_LAT_BINARY <= 6'b100000;
		33 : CLK_COR_MIN_LAT_BINARY <= 6'b100001;
		34 : CLK_COR_MIN_LAT_BINARY <= 6'b100010;
		35 : CLK_COR_MIN_LAT_BINARY <= 6'b100011;
		36 : CLK_COR_MIN_LAT_BINARY <= 6'b100100;
		37 : CLK_COR_MIN_LAT_BINARY <= 6'b100101;
		38 : CLK_COR_MIN_LAT_BINARY <= 6'b100110;
		39 : CLK_COR_MIN_LAT_BINARY <= 6'b100111;
		40 : CLK_COR_MIN_LAT_BINARY <= 6'b101000;
		41 : CLK_COR_MIN_LAT_BINARY <= 6'b101001;
		42 : CLK_COR_MIN_LAT_BINARY <= 6'b101010;
		43 : CLK_COR_MIN_LAT_BINARY <= 6'b101011;
		44 : CLK_COR_MIN_LAT_BINARY <= 6'b101100;
		45 : CLK_COR_MIN_LAT_BINARY <= 6'b101101;
		46 : CLK_COR_MIN_LAT_BINARY <= 6'b101110;
		47 : CLK_COR_MIN_LAT_BINARY <= 6'b101111;
		48 : CLK_COR_MIN_LAT_BINARY <= 6'b110000;
		49 : CLK_COR_MIN_LAT_BINARY <= 6'b110001;
		50 : CLK_COR_MIN_LAT_BINARY <= 6'b110010;
		51 : CLK_COR_MIN_LAT_BINARY <= 6'b110011;
		52 : CLK_COR_MIN_LAT_BINARY <= 6'b110100;
		53 : CLK_COR_MIN_LAT_BINARY <= 6'b110101;
		54 : CLK_COR_MIN_LAT_BINARY <= 6'b110110;
		55 : CLK_COR_MIN_LAT_BINARY <= 6'b110111;
		56 : CLK_COR_MIN_LAT_BINARY <= 6'b111000;
		57 : CLK_COR_MIN_LAT_BINARY <= 6'b111001;
		58 : CLK_COR_MIN_LAT_BINARY <= 6'b111010;
		59 : CLK_COR_MIN_LAT_BINARY <= 6'b111011;
		60 : CLK_COR_MIN_LAT_BINARY <= 6'b111100;
		61 : CLK_COR_MIN_LAT_BINARY <= 6'b111101;
		62 : CLK_COR_MIN_LAT_BINARY <= 6'b111110;
		63 : CLK_COR_MIN_LAT_BINARY <= 6'b111111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_MIN_LAT on GT10 instance %m is set to %d.  Legal values for this attribute are 0 to 63.", CLK_COR_MIN_LAT);
			$finish;
		end
	endcase

	case (CLK_COR_SEQ_2_USE)
		"FALSE" : CLK_COR_SEQ_2_USE_BINARY <= 0;
		"TRUE" : CLK_COR_SEQ_2_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_SEQ_2_USE on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_COR_SEQ_2_USE);
			$finish;
		end
	endcase

	case (CLK_COR_SEQ_DROP)
		"FALSE" : CLK_COR_SEQ_DROP_BINARY <= 0;
		"TRUE" : CLK_COR_SEQ_DROP_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_SEQ_DROP on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_COR_SEQ_DROP);
			$finish;
		end
	endcase

	case (CLK_COR_SEQ_LEN)
		1 : CLK_COR_SEQ_LEN_BINARY <= 3'b000;
		2 : CLK_COR_SEQ_LEN_BINARY <= 3'b001;
		3 : CLK_COR_SEQ_LEN_BINARY <= 3'b010;
		4 : CLK_COR_SEQ_LEN_BINARY <= 3'b011;
		8 : CLK_COR_SEQ_LEN_BINARY <= 3'b111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_SEQ_LEN on GT10 instance %m is set to %d.  Legal values for this attribute are 1, 2, 3, 4 or 8.", CLK_COR_SEQ_LEN);
			$finish;
		end
	endcase

	case (CLK_CORRECT_USE)
		"FALSE" : CLK_CORRECT_USE_BINARY <= 0;
		"TRUE" : CLK_CORRECT_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_CORRECT_USE on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_CORRECT_USE);
			$finish;
		end
	endcase

	case (DEC_MCOMMA_DETECT)
		"FALSE" : DEC_MCOMMA_DETECT_BINARY <= 0;
		"TRUE" : DEC_MCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute DEC_MCOMMA_DETECT on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", DEC_MCOMMA_DETECT);
			$finish;
		end
	endcase

	case (DEC_PCOMMA_DETECT)
		"FALSE" : DEC_PCOMMA_DETECT_BINARY <= 0;
		"TRUE" : DEC_PCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute DEC_PCOMMA_DETECT on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", DEC_PCOMMA_DETECT);
			$finish;
		end
	endcase

	case (DEC_VALID_COMMA_ONLY)
		"FALSE" : DEC_VALID_COMMA_ONLY_BINARY <= 0;
		"TRUE" : DEC_VALID_COMMA_ONLY_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute DEC_VALID_COMMA_ONLY on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", DEC_VALID_COMMA_ONLY);
			$finish;
		end
	endcase

	case (MCOMMA_DETECT)
		"FALSE" : MCOMMA_DETECT_BINARY <= 0;
		"TRUE" : MCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute MCOMMA_DETECT on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", MCOMMA_DETECT);
			$finish;
		end
	endcase

	case (PCOMMA_DETECT)
		"FALSE" : PCOMMA_DETECT_BINARY <= 0;
		"TRUE" : PCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute PCOMMA_DETECT on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", PCOMMA_DETECT);
			$finish;
		end
	endcase

	case (PMA_SPEED_USE)
		"PMA_SPEED" : ;
		"PMA_SPEED_HEX" : ;
		default : begin
			$display("Attribute Syntax Error : The Attribute PMA_SPEED_USE on GT10 instance %m is set to %s.  Legal values for this attribute are PMA_SPEED or PMA_SPEED_HEX.", PMA_SPEED_USE);
			$finish;
		end
	endcase
			
	if (PMA_SPEED_USE == "PMA_SPEED") begin
		case (PMA_SPEED)
			"0_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d00208c9050d4068;
			"0_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d00208c9050d4068;
			"1_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d10208c9050d4168;
			"1_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d10208c9050d4168;
			"2_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d40208c9060d4468;
			"2_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d40208c9060d4468;
			"3_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d50208c9060d4568;
			"3_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d50208c9060d4568;
			"4_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d80208c9020d4868;
			"4_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d80208c9020d4868;
			"5_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d90208c9020d4968;
			"5_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d90208c9020d4968;
			"6_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d00208c9050d4068;
			"6_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d00208c9050d4068;
			"7_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d10208c9050d4168;
			"7_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d10208c9050d4168;
			"8_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d40208c9050d4468;
			"8_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d40208c9050d4468;
			"9_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d50208c9050d4568;
			"9_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d50208c9050d4568;
			"10_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d80208c9020d4868;
			"10_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d80208c9020d4868;
			"11_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d90208c9020d4968;
			"11_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504d90208c9020d4968;
			"12_40" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1506e20208c9050da268;
			"12_80" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1506e20208c9050da268;
			"13_40" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1506e60208c9050da668;
			"13_80" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1506e60208c9050da668;
			"14_40" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1506ea0208c9020daa68;
			"14_80" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1506ea0208c9020daa68;
			"15_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504c00208c9050d0068;
			"15_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504c00208c9050d0068;
			"16_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504c40208c9050d0468;
			"16_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504c40208c9050d0468;
			"17_32" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504c80208c9010d0868;
			"17_64" : PMA_SPEED_BINARY <= 120'h00ffcd24ca1504c80208c9010d0868;
			"18_40" : PMA_SPEED_BINARY <= 120'h00ffcd50ca1106e21208c9050da228;
			"18_80" : PMA_SPEED_BINARY <= 120'h00ffcd50ca1106e21208c9050da228;
			"19_40" : PMA_SPEED_BINARY <= 120'h00ffcd50ca1106e21208c9050da228;
			"19_80" : PMA_SPEED_BINARY <= 120'h00ffcd50ca1106e21208c9050da228;
			"20_40" : PMA_SPEED_BINARY <= 120'h00ffcd30ca1106e21208c9050da228;
			"20_80" : PMA_SPEED_BINARY <= 120'h00ffcd50ca1106e21208c9050da228;
			"21_40" : PMA_SPEED_BINARY <= 120'h00ffcd50ca0d06e21208c9050da228;
			"21_80" : PMA_SPEED_BINARY <= 120'h00ffcd50ca0d06e21208c9050da228;
			"22_40" : PMA_SPEED_BINARY <= 120'h00ffcd50ca0d06e61208c9010da628;
			"22_80" : PMA_SPEED_BINARY <= 120'h00ffcd50ca0d06e61208c9010da628;
			"23_10" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132263068090104a628;
			"23_20" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132663068090105a628;
			"23_40" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132663068090105a628;
			"24_10" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132223068090504a228;
			"24_20" : PMA_SPEED_BINARY <= 120'h00fc0db00b0f32623068090505a228;
			"24_40" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132623068090505a228;
			"25_10" : PMA_SPEED_BINARY <= 120'h00fc0db00b0f32263068090104a628;
			"25_20" : PMA_SPEED_BINARY <= 120'h00fc0db00b0f32663068090105a628;
			"25_40" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132663068090105a628;
			"26_10" : PMA_SPEED_BINARY <= 120'h00ffcd500b01322a3068090104aa28;
			"26_20" : PMA_SPEED_BINARY <= 120'h00ffcd500b01326a3068090105aa28;
			"26_40" : PMA_SPEED_BINARY <= 120'h00ffcd500b01326a3068090105aa28;
			"27_10" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132223068090504a220;
			"27_20" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132623068090505a220;
			"27_40" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132623068090505a220;
			"28_10" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132263068090104a620;
			"28_20" : PMA_SPEED_BINARY <= 120'h00fc0d300b0f32663068090105a620;
			"28_40" : PMA_SPEED_BINARY <= 120'h00ffcd500b0132663068090105a620;
			"29_10" : PMA_SPEED_BINARY <= 120'h00ffcd500b01322a3068090104aa20;
			"29_20" : PMA_SPEED_BINARY <= 120'h00ffcd500b01326a3068090105aa20;
			"29_40" : PMA_SPEED_BINARY <= 120'h00ffcd500b01326a3068090105aa20;
			"30_16" : PMA_SPEED_BINARY <= 120'h00ffcd500b01304430680901050420;
			"30_32" : PMA_SPEED_BINARY <= 120'h00ffcd500b01304430680901050420;
			"30_8" : PMA_SPEED_BINARY <= 120'h00ffcd500b01300430680901040420;
			"31_16" : PMA_SPEED_BINARY <= 120'h00fc0d300b0f304830680901050820;
			"31_32" : PMA_SPEED_BINARY <= 120'h00ffcd500b01304830680901050820;
			"31_8" : PMA_SPEED_BINARY <= 120'h00ffcd500b01300830680901040820;
			default : begin
				$display("Attribute Syntax Error : The Attribute PMA_SPEED on GT10 instance %m is set to %s.  Legal values for this attribute are 0_32, 0_64, 1_32, 1_64, 2_32, 2_64, 3_32, 3_64, 4_32, 4_64, 5_32, 5_64, 6_32, 6_64, 7_32, 7_64, 8_32, 8_64, 9_32, 9_64, 10_32, 10_64, 11_32, 11_64, 12_40, 12_80, 13_40, 13_80, 14_40, 14_80, 15_32, 15_64, 16_32, 16_64, 17_32, 17_64, 18_40, 18_80, 19_40, 19_80, 20_40, 20_80, 21_40, 21_80, 22_40, 22_80, 23_10, 23_20, 23_40, 24_10, 24_20, 24_40, 25_10, 25_20, 25_40, 26_10, 26_20, 26_40, 27_10, 27_20, 27_40, 28_10, 28_20, 28_40, 29_10, 29_20, 29_40, 30_16, 30_32, 30_8, 31_16, 31_32 or 31_8.", PMA_SPEED);
				$finish;
			end
		endcase        
	end
	else if (PMA_SPEED_USE == "PMA_SPEED_HEX") begin
		PMA_SPEED_BINARY <= PMA_SPEED_HEX; 
	end

	case (RX_BUFFER_USE)
		"FALSE" : RX_BUFFER_USE_BINARY <= 0;
		"TRUE" : RX_BUFFER_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_BUFFER_USE on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", RX_BUFFER_USE);
			$finish;
		end
	endcase

	case (RX_LOS_INVALID_INCR)
		1 : RX_LOS_INVALID_INCR_BINARY <= 8'b00000001;
		2 : RX_LOS_INVALID_INCR_BINARY <= 8'b00000010;
		4 : RX_LOS_INVALID_INCR_BINARY <= 8'b00000100;
		8 : RX_LOS_INVALID_INCR_BINARY <= 8'b00001000;
		16 : RX_LOS_INVALID_INCR_BINARY <= 8'b00010000;
		32 : RX_LOS_INVALID_INCR_BINARY <= 8'b00100000;
		64 : RX_LOS_INVALID_INCR_BINARY <= 8'b01000000;
		128 : RX_LOS_INVALID_INCR_BINARY <= 8'b10000000;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_LOS_INVALID_INCR on GT10 instance %m is set to %d.  Legal values for this attribute are 1, 2, 4, 8, 16, 32, 64 or 128.", RX_LOS_INVALID_INCR);
			$finish;
		end
	endcase

	case (RX_LOS_THRESHOLD)
		4 : RX_LOS_THRESHOLD_BINARY <= 8'b00000001;
		8 : RX_LOS_THRESHOLD_BINARY <= 8'b00000010;
		16 : RX_LOS_THRESHOLD_BINARY <= 8'b00000100;
		32 : RX_LOS_THRESHOLD_BINARY <= 8'b00001000;
		64 : RX_LOS_THRESHOLD_BINARY <= 8'b00010000;
		128 : RX_LOS_THRESHOLD_BINARY <= 8'b00100000;
		256 : RX_LOS_THRESHOLD_BINARY <= 8'b01000000;
		512 : RX_LOS_THRESHOLD_BINARY <= 8'b10000000;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_LOS_THRESHOLD on GT10 instance %m is set to %d.  Legal values for this attribute are 4, 8, 16, 32, 64, 128, 256 or 512.", RX_LOS_THRESHOLD);
			$finish;
		end
	endcase

	case (RX_LOSS_OF_SYNC_FSM)
		"FALSE" : RX_LOSS_OF_SYNC_FSM_BINARY <= 0;
		"TRUE" : RX_LOSS_OF_SYNC_FSM_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_LOSS_OF_SYNC_FSM on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", RX_LOSS_OF_SYNC_FSM);
			$finish;
		end
	endcase

	case (SH_CNT_MAX)
		0 : SH_CNT_MAX_BINARY <= 8'b00000000;
		1 : SH_CNT_MAX_BINARY <= 8'b00000001;
		2 : SH_CNT_MAX_BINARY <= 8'b00000010;
		3 : SH_CNT_MAX_BINARY <= 8'b00000011;
		4 : SH_CNT_MAX_BINARY <= 8'b00000100;
		5 : SH_CNT_MAX_BINARY <= 8'b00000101;
		6 : SH_CNT_MAX_BINARY <= 8'b00000110;
		7 : SH_CNT_MAX_BINARY <= 8'b00000111;
		8 : SH_CNT_MAX_BINARY <= 8'b00001000;
		9 : SH_CNT_MAX_BINARY <= 8'b00001001;
		10 : SH_CNT_MAX_BINARY <= 8'b00001010;
		11 : SH_CNT_MAX_BINARY <= 8'b00001011;
		12 : SH_CNT_MAX_BINARY <= 8'b00001100;
		13 : SH_CNT_MAX_BINARY <= 8'b00001101;
		14 : SH_CNT_MAX_BINARY <= 8'b00001110;
		15 : SH_CNT_MAX_BINARY <= 8'b00001111;
		16 : SH_CNT_MAX_BINARY <= 8'b00010000;
		17 : SH_CNT_MAX_BINARY <= 8'b00010001;
		18 : SH_CNT_MAX_BINARY <= 8'b00010010;
		19 : SH_CNT_MAX_BINARY <= 8'b00010011;
		20 : SH_CNT_MAX_BINARY <= 8'b00010100;
		21 : SH_CNT_MAX_BINARY <= 8'b00010101;
		22 : SH_CNT_MAX_BINARY <= 8'b00010110;
		23 : SH_CNT_MAX_BINARY <= 8'b00010111;
		24 : SH_CNT_MAX_BINARY <= 8'b00011000;
		25 : SH_CNT_MAX_BINARY <= 8'b00011001;
		26 : SH_CNT_MAX_BINARY <= 8'b00011010;
		27 : SH_CNT_MAX_BINARY <= 8'b00011011;
		28 : SH_CNT_MAX_BINARY <= 8'b00011100;
		29 : SH_CNT_MAX_BINARY <= 8'b00011101;
		30 : SH_CNT_MAX_BINARY <= 8'b00011110;
		31 : SH_CNT_MAX_BINARY <= 8'b00011111;
		32 : SH_CNT_MAX_BINARY <= 8'b00100000;
		33 : SH_CNT_MAX_BINARY <= 8'b00100001;
		34 : SH_CNT_MAX_BINARY <= 8'b00100010;
		35 : SH_CNT_MAX_BINARY <= 8'b00100011;
		36 : SH_CNT_MAX_BINARY <= 8'b00100100;
		37 : SH_CNT_MAX_BINARY <= 8'b00100101;
		38 : SH_CNT_MAX_BINARY <= 8'b00100110;
		39 : SH_CNT_MAX_BINARY <= 8'b00100111;
		40 : SH_CNT_MAX_BINARY <= 8'b00101000;
		41 : SH_CNT_MAX_BINARY <= 8'b00101001;
		42 : SH_CNT_MAX_BINARY <= 8'b00101010;
		43 : SH_CNT_MAX_BINARY <= 8'b00101011;
		44 : SH_CNT_MAX_BINARY <= 8'b00101100;
		45 : SH_CNT_MAX_BINARY <= 8'b00101101;
		46 : SH_CNT_MAX_BINARY <= 8'b00101110;
		47 : SH_CNT_MAX_BINARY <= 8'b00101111;
		48 : SH_CNT_MAX_BINARY <= 8'b00110000;
		49 : SH_CNT_MAX_BINARY <= 8'b00110001;
		50 : SH_CNT_MAX_BINARY <= 8'b00110010;
		51 : SH_CNT_MAX_BINARY <= 8'b00110011;
		52 : SH_CNT_MAX_BINARY <= 8'b00110100;
		53 : SH_CNT_MAX_BINARY <= 8'b00110101;
		54 : SH_CNT_MAX_BINARY <= 8'b00110110;
		55 : SH_CNT_MAX_BINARY <= 8'b00110111;
		56 : SH_CNT_MAX_BINARY <= 8'b00111000;
		57 : SH_CNT_MAX_BINARY <= 8'b00111001;
		58 : SH_CNT_MAX_BINARY <= 8'b00111010;
		59 : SH_CNT_MAX_BINARY <= 8'b00111011;
		60 : SH_CNT_MAX_BINARY <= 8'b00111100;
		61 : SH_CNT_MAX_BINARY <= 8'b00111101;
		62 : SH_CNT_MAX_BINARY <= 8'b00111110;
		63 : SH_CNT_MAX_BINARY <= 8'b00111111;
		64 : SH_CNT_MAX_BINARY <= 8'b01000000;
		65 : SH_CNT_MAX_BINARY <= 8'b01000001;
		66 : SH_CNT_MAX_BINARY <= 8'b01000010;
		67 : SH_CNT_MAX_BINARY <= 8'b01000011;
		68 : SH_CNT_MAX_BINARY <= 8'b01000100;
		69 : SH_CNT_MAX_BINARY <= 8'b01000101;
		70 : SH_CNT_MAX_BINARY <= 8'b01000110;
		71 : SH_CNT_MAX_BINARY <= 8'b01000111;
		72 : SH_CNT_MAX_BINARY <= 8'b01001000;
		73 : SH_CNT_MAX_BINARY <= 8'b01001001;
		74 : SH_CNT_MAX_BINARY <= 8'b01001010;
		75 : SH_CNT_MAX_BINARY <= 8'b01001011;
		76 : SH_CNT_MAX_BINARY <= 8'b01001100;
		77 : SH_CNT_MAX_BINARY <= 8'b01001101;
		78 : SH_CNT_MAX_BINARY <= 8'b01001110;
		79 : SH_CNT_MAX_BINARY <= 8'b01001111;
		80 : SH_CNT_MAX_BINARY <= 8'b01010000;
		81 : SH_CNT_MAX_BINARY <= 8'b01010001;
		82 : SH_CNT_MAX_BINARY <= 8'b01010010;
		83 : SH_CNT_MAX_BINARY <= 8'b01010011;
		84 : SH_CNT_MAX_BINARY <= 8'b01010100;
		85 : SH_CNT_MAX_BINARY <= 8'b01010101;
		86 : SH_CNT_MAX_BINARY <= 8'b01010110;
		87 : SH_CNT_MAX_BINARY <= 8'b01010111;
		88 : SH_CNT_MAX_BINARY <= 8'b01011000;
		89 : SH_CNT_MAX_BINARY <= 8'b01011001;
		90 : SH_CNT_MAX_BINARY <= 8'b01011010;
		91 : SH_CNT_MAX_BINARY <= 8'b01011011;
		92 : SH_CNT_MAX_BINARY <= 8'b01011100;
		93 : SH_CNT_MAX_BINARY <= 8'b01011101;
		94 : SH_CNT_MAX_BINARY <= 8'b01011110;
		95 : SH_CNT_MAX_BINARY <= 8'b01011111;
		96 : SH_CNT_MAX_BINARY <= 8'b01100000;
		97 : SH_CNT_MAX_BINARY <= 8'b01100001;
		98 : SH_CNT_MAX_BINARY <= 8'b01100010;
		99 : SH_CNT_MAX_BINARY <= 8'b01100011;
		100 : SH_CNT_MAX_BINARY <= 8'b01100100;
		101 : SH_CNT_MAX_BINARY <= 8'b01100101;
		102 : SH_CNT_MAX_BINARY <= 8'b01100110;
		103 : SH_CNT_MAX_BINARY <= 8'b01100111;
		104 : SH_CNT_MAX_BINARY <= 8'b01101000;
		105 : SH_CNT_MAX_BINARY <= 8'b01101001;
		106 : SH_CNT_MAX_BINARY <= 8'b01101010;
		107 : SH_CNT_MAX_BINARY <= 8'b01101011;
		108 : SH_CNT_MAX_BINARY <= 8'b01101100;
		109 : SH_CNT_MAX_BINARY <= 8'b01101101;
		110 : SH_CNT_MAX_BINARY <= 8'b01101110;
		111 : SH_CNT_MAX_BINARY <= 8'b01101111;
		112 : SH_CNT_MAX_BINARY <= 8'b01110000;
		113 : SH_CNT_MAX_BINARY <= 8'b01110001;
		114 : SH_CNT_MAX_BINARY <= 8'b01110010;
		115 : SH_CNT_MAX_BINARY <= 8'b01110011;
		116 : SH_CNT_MAX_BINARY <= 8'b01110100;
		117 : SH_CNT_MAX_BINARY <= 8'b01110101;
		118 : SH_CNT_MAX_BINARY <= 8'b01110110;
		119 : SH_CNT_MAX_BINARY <= 8'b01110111;
		120 : SH_CNT_MAX_BINARY <= 8'b01111000;
		121 : SH_CNT_MAX_BINARY <= 8'b01111001;
		122 : SH_CNT_MAX_BINARY <= 8'b01111010;
		123 : SH_CNT_MAX_BINARY <= 8'b01111011;
		124 : SH_CNT_MAX_BINARY <= 8'b01111100;
		125 : SH_CNT_MAX_BINARY <= 8'b01111101;
		126 : SH_CNT_MAX_BINARY <= 8'b01111110;
		127 : SH_CNT_MAX_BINARY <= 8'b01111111;
		128 : SH_CNT_MAX_BINARY <= 8'b10000000;
		129 : SH_CNT_MAX_BINARY <= 8'b10000001;
		130 : SH_CNT_MAX_BINARY <= 8'b10000010;
		131 : SH_CNT_MAX_BINARY <= 8'b10000011;
		132 : SH_CNT_MAX_BINARY <= 8'b10000100;
		133 : SH_CNT_MAX_BINARY <= 8'b10000101;
		134 : SH_CNT_MAX_BINARY <= 8'b10000110;
		135 : SH_CNT_MAX_BINARY <= 8'b10000111;
		136 : SH_CNT_MAX_BINARY <= 8'b10001000;
		137 : SH_CNT_MAX_BINARY <= 8'b10001001;
		138 : SH_CNT_MAX_BINARY <= 8'b10001010;
		139 : SH_CNT_MAX_BINARY <= 8'b10001011;
		140 : SH_CNT_MAX_BINARY <= 8'b10001100;
		141 : SH_CNT_MAX_BINARY <= 8'b10001101;
		142 : SH_CNT_MAX_BINARY <= 8'b10001110;
		143 : SH_CNT_MAX_BINARY <= 8'b10001111;
		144 : SH_CNT_MAX_BINARY <= 8'b10010000;
		145 : SH_CNT_MAX_BINARY <= 8'b10010001;
		146 : SH_CNT_MAX_BINARY <= 8'b10010010;
		147 : SH_CNT_MAX_BINARY <= 8'b10010011;
		148 : SH_CNT_MAX_BINARY <= 8'b10010100;
		149 : SH_CNT_MAX_BINARY <= 8'b10010101;
		150 : SH_CNT_MAX_BINARY <= 8'b10010110;
		151 : SH_CNT_MAX_BINARY <= 8'b10010111;
		152 : SH_CNT_MAX_BINARY <= 8'b10011000;
		153 : SH_CNT_MAX_BINARY <= 8'b10011001;
		154 : SH_CNT_MAX_BINARY <= 8'b10011010;
		155 : SH_CNT_MAX_BINARY <= 8'b10011011;
		156 : SH_CNT_MAX_BINARY <= 8'b10011100;
		157 : SH_CNT_MAX_BINARY <= 8'b10011101;
		158 : SH_CNT_MAX_BINARY <= 8'b10011110;
		159 : SH_CNT_MAX_BINARY <= 8'b10011111;
		160 : SH_CNT_MAX_BINARY <= 8'b10100000;
		161 : SH_CNT_MAX_BINARY <= 8'b10100001;
		162 : SH_CNT_MAX_BINARY <= 8'b10100010;
		163 : SH_CNT_MAX_BINARY <= 8'b10100011;
		164 : SH_CNT_MAX_BINARY <= 8'b10100100;
		165 : SH_CNT_MAX_BINARY <= 8'b10100101;
		166 : SH_CNT_MAX_BINARY <= 8'b10100110;
		167 : SH_CNT_MAX_BINARY <= 8'b10100111;
		168 : SH_CNT_MAX_BINARY <= 8'b10101000;
		169 : SH_CNT_MAX_BINARY <= 8'b10101001;
		170 : SH_CNT_MAX_BINARY <= 8'b10101010;
		171 : SH_CNT_MAX_BINARY <= 8'b10101011;
		172 : SH_CNT_MAX_BINARY <= 8'b10101100;
		173 : SH_CNT_MAX_BINARY <= 8'b10101101;
		174 : SH_CNT_MAX_BINARY <= 8'b10101110;
		175 : SH_CNT_MAX_BINARY <= 8'b10101111;
		176 : SH_CNT_MAX_BINARY <= 8'b10110000;
		177 : SH_CNT_MAX_BINARY <= 8'b10110001;
		178 : SH_CNT_MAX_BINARY <= 8'b10110010;
		179 : SH_CNT_MAX_BINARY <= 8'b10110011;
		180 : SH_CNT_MAX_BINARY <= 8'b10110100;
		181 : SH_CNT_MAX_BINARY <= 8'b10110101;
		182 : SH_CNT_MAX_BINARY <= 8'b10110110;
		183 : SH_CNT_MAX_BINARY <= 8'b10110111;
		184 : SH_CNT_MAX_BINARY <= 8'b10111000;
		185 : SH_CNT_MAX_BINARY <= 8'b10111001;
		186 : SH_CNT_MAX_BINARY <= 8'b10111010;
		187 : SH_CNT_MAX_BINARY <= 8'b10111011;
		188 : SH_CNT_MAX_BINARY <= 8'b10111100;
		189 : SH_CNT_MAX_BINARY <= 8'b10111101;
		190 : SH_CNT_MAX_BINARY <= 8'b10111110;
		191 : SH_CNT_MAX_BINARY <= 8'b10111111;
		192 : SH_CNT_MAX_BINARY <= 8'b11000000;
		193 : SH_CNT_MAX_BINARY <= 8'b11000001;
		194 : SH_CNT_MAX_BINARY <= 8'b11000010;
		195 : SH_CNT_MAX_BINARY <= 8'b11000011;
		196 : SH_CNT_MAX_BINARY <= 8'b11000100;
		197 : SH_CNT_MAX_BINARY <= 8'b11000101;
		198 : SH_CNT_MAX_BINARY <= 8'b11000110;
		199 : SH_CNT_MAX_BINARY <= 8'b11000111;
		200 : SH_CNT_MAX_BINARY <= 8'b11001000;
		201 : SH_CNT_MAX_BINARY <= 8'b11001001;
		202 : SH_CNT_MAX_BINARY <= 8'b11001010;
		203 : SH_CNT_MAX_BINARY <= 8'b11001011;
		204 : SH_CNT_MAX_BINARY <= 8'b11001100;
		205 : SH_CNT_MAX_BINARY <= 8'b11001101;
		206 : SH_CNT_MAX_BINARY <= 8'b11001110;
		207 : SH_CNT_MAX_BINARY <= 8'b11001111;
		208 : SH_CNT_MAX_BINARY <= 8'b11010000;
		209 : SH_CNT_MAX_BINARY <= 8'b11010001;
		210 : SH_CNT_MAX_BINARY <= 8'b11010010;
		211 : SH_CNT_MAX_BINARY <= 8'b11010011;
		212 : SH_CNT_MAX_BINARY <= 8'b11010100;
		213 : SH_CNT_MAX_BINARY <= 8'b11010101;
		214 : SH_CNT_MAX_BINARY <= 8'b11010110;
		215 : SH_CNT_MAX_BINARY <= 8'b11010111;
		216 : SH_CNT_MAX_BINARY <= 8'b11011000;
		217 : SH_CNT_MAX_BINARY <= 8'b11011001;
		218 : SH_CNT_MAX_BINARY <= 8'b11011010;
		219 : SH_CNT_MAX_BINARY <= 8'b11011011;
		220 : SH_CNT_MAX_BINARY <= 8'b11011100;
		221 : SH_CNT_MAX_BINARY <= 8'b11011101;
		222 : SH_CNT_MAX_BINARY <= 8'b11011110;
		223 : SH_CNT_MAX_BINARY <= 8'b11011111;
		224 : SH_CNT_MAX_BINARY <= 8'b11100000;
		225 : SH_CNT_MAX_BINARY <= 8'b11100001;
		226 : SH_CNT_MAX_BINARY <= 8'b11100010;
		227 : SH_CNT_MAX_BINARY <= 8'b11100011;
		228 : SH_CNT_MAX_BINARY <= 8'b11100100;
		229 : SH_CNT_MAX_BINARY <= 8'b11100101;
		230 : SH_CNT_MAX_BINARY <= 8'b11100110;
		231 : SH_CNT_MAX_BINARY <= 8'b11100111;
		232 : SH_CNT_MAX_BINARY <= 8'b11101000;
		233 : SH_CNT_MAX_BINARY <= 8'b11101001;
		234 : SH_CNT_MAX_BINARY <= 8'b11101010;
		235 : SH_CNT_MAX_BINARY <= 8'b11101011;
		236 : SH_CNT_MAX_BINARY <= 8'b11101100;
		237 : SH_CNT_MAX_BINARY <= 8'b11101101;
		238 : SH_CNT_MAX_BINARY <= 8'b11101110;
		239 : SH_CNT_MAX_BINARY <= 8'b11101111;
		240 : SH_CNT_MAX_BINARY <= 8'b11110000;
		241 : SH_CNT_MAX_BINARY <= 8'b11110001;
		242 : SH_CNT_MAX_BINARY <= 8'b11110010;
		243 : SH_CNT_MAX_BINARY <= 8'b11110011;
		244 : SH_CNT_MAX_BINARY <= 8'b11110100;
		245 : SH_CNT_MAX_BINARY <= 8'b11110101;
		246 : SH_CNT_MAX_BINARY <= 8'b11110110;
		247 : SH_CNT_MAX_BINARY <= 8'b11110111;
		248 : SH_CNT_MAX_BINARY <= 8'b11111000;
		249 : SH_CNT_MAX_BINARY <= 8'b11111001;
		250 : SH_CNT_MAX_BINARY <= 8'b11111010;
		251 : SH_CNT_MAX_BINARY <= 8'b11111011;
		252 : SH_CNT_MAX_BINARY <= 8'b11111100;
		253 : SH_CNT_MAX_BINARY <= 8'b11111101;
		254 : SH_CNT_MAX_BINARY <= 8'b11111110;
		255 : SH_CNT_MAX_BINARY <= 8'b11111111;
		default : begin
			$display("Attribute Syntax Error : The Attribute SH_CNT_MAX on GT10 instance %m is set to %d.  Legal values for this attribute are 0 to 255.", SH_CNT_MAX);
			$finish;
		end
	endcase

	case (SH_INVALID_CNT_MAX)
		0 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000000;
		1 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000001;
		2 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000010;
		3 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000011;
		4 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000100;
		5 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000101;
		6 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000110;
		7 : SH_INVALID_CNT_MAX_BINARY <= 8'b00000111;
		8 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001000;
		9 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001001;
		10 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001010;
		11 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001011;
		12 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001100;
		13 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001101;
		14 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001110;
		15 : SH_INVALID_CNT_MAX_BINARY <= 8'b00001111;
		16 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010000;
		17 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010001;
		18 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010010;
		19 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010011;
		20 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010100;
		21 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010101;
		22 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010110;
		23 : SH_INVALID_CNT_MAX_BINARY <= 8'b00010111;
		24 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011000;
		25 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011001;
		26 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011010;
		27 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011011;
		28 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011100;
		29 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011101;
		30 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011110;
		31 : SH_INVALID_CNT_MAX_BINARY <= 8'b00011111;
		32 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100000;
		33 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100001;
		34 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100010;
		35 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100011;
		36 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100100;
		37 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100101;
		38 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100110;
		39 : SH_INVALID_CNT_MAX_BINARY <= 8'b00100111;
		40 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101000;
		41 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101001;
		42 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101010;
		43 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101011;
		44 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101100;
		45 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101101;
		46 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101110;
		47 : SH_INVALID_CNT_MAX_BINARY <= 8'b00101111;
		48 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110000;
		49 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110001;
		50 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110010;
		51 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110011;
		52 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110100;
		53 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110101;
		54 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110110;
		55 : SH_INVALID_CNT_MAX_BINARY <= 8'b00110111;
		56 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111000;
		57 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111001;
		58 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111010;
		59 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111011;
		60 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111100;
		61 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111101;
		62 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111110;
		63 : SH_INVALID_CNT_MAX_BINARY <= 8'b00111111;
		64 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000000;
		65 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000001;
		66 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000010;
		67 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000011;
		68 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000100;
		69 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000101;
		70 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000110;
		71 : SH_INVALID_CNT_MAX_BINARY <= 8'b01000111;
		72 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001000;
		73 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001001;
		74 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001010;
		75 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001011;
		76 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001100;
		77 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001101;
		78 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001110;
		79 : SH_INVALID_CNT_MAX_BINARY <= 8'b01001111;
		80 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010000;
		81 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010001;
		82 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010010;
		83 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010011;
		84 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010100;
		85 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010101;
		86 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010110;
		87 : SH_INVALID_CNT_MAX_BINARY <= 8'b01010111;
		88 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011000;
		89 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011001;
		90 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011010;
		91 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011011;
		92 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011100;
		93 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011101;
		94 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011110;
		95 : SH_INVALID_CNT_MAX_BINARY <= 8'b01011111;
		96 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100000;
		97 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100001;
		98 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100010;
		99 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100011;
		100 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100100;
		101 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100101;
		102 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100110;
		103 : SH_INVALID_CNT_MAX_BINARY <= 8'b01100111;
		104 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101000;
		105 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101001;
		106 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101010;
		107 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101011;
		108 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101100;
		109 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101101;
		110 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101110;
		111 : SH_INVALID_CNT_MAX_BINARY <= 8'b01101111;
		112 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110000;
		113 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110001;
		114 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110010;
		115 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110011;
		116 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110100;
		117 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110101;
		118 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110110;
		119 : SH_INVALID_CNT_MAX_BINARY <= 8'b01110111;
		120 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111000;
		121 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111001;
		122 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111010;
		123 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111011;
		124 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111100;
		125 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111101;
		126 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111110;
		127 : SH_INVALID_CNT_MAX_BINARY <= 8'b01111111;
		128 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000000;
		129 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000001;
		130 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000010;
		131 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000011;
		132 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000100;
		133 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000101;
		134 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000110;
		135 : SH_INVALID_CNT_MAX_BINARY <= 8'b10000111;
		136 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001000;
		137 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001001;
		138 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001010;
		139 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001011;
		140 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001100;
		141 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001101;
		142 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001110;
		143 : SH_INVALID_CNT_MAX_BINARY <= 8'b10001111;
		144 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010000;
		145 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010001;
		146 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010010;
		147 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010011;
		148 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010100;
		149 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010101;
		150 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010110;
		151 : SH_INVALID_CNT_MAX_BINARY <= 8'b10010111;
		152 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011000;
		153 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011001;
		154 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011010;
		155 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011011;
		156 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011100;
		157 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011101;
		158 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011110;
		159 : SH_INVALID_CNT_MAX_BINARY <= 8'b10011111;
		160 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100000;
		161 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100001;
		162 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100010;
		163 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100011;
		164 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100100;
		165 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100101;
		166 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100110;
		167 : SH_INVALID_CNT_MAX_BINARY <= 8'b10100111;
		168 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101000;
		169 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101001;
		170 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101010;
		171 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101011;
		172 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101100;
		173 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101101;
		174 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101110;
		175 : SH_INVALID_CNT_MAX_BINARY <= 8'b10101111;
		176 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110000;
		177 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110001;
		178 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110010;
		179 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110011;
		180 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110100;
		181 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110101;
		182 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110110;
		183 : SH_INVALID_CNT_MAX_BINARY <= 8'b10110111;
		184 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111000;
		185 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111001;
		186 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111010;
		187 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111011;
		188 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111100;
		189 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111101;
		190 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111110;
		191 : SH_INVALID_CNT_MAX_BINARY <= 8'b10111111;
		192 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000000;
		193 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000001;
		194 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000010;
		195 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000011;
		196 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000100;
		197 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000101;
		198 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000110;
		199 : SH_INVALID_CNT_MAX_BINARY <= 8'b11000111;
		200 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001000;
		201 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001001;
		202 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001010;
		203 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001011;
		204 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001100;
		205 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001101;
		206 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001110;
		207 : SH_INVALID_CNT_MAX_BINARY <= 8'b11001111;
		208 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010000;
		209 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010001;
		210 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010010;
		211 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010011;
		212 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010100;
		213 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010101;
		214 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010110;
		215 : SH_INVALID_CNT_MAX_BINARY <= 8'b11010111;
		216 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011000;
		217 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011001;
		218 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011010;
		219 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011011;
		220 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011100;
		221 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011101;
		222 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011110;
		223 : SH_INVALID_CNT_MAX_BINARY <= 8'b11011111;
		224 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100000;
		225 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100001;
		226 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100010;
		227 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100011;
		228 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100100;
		229 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100101;
		230 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100110;
		231 : SH_INVALID_CNT_MAX_BINARY <= 8'b11100111;
		232 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101000;
		233 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101001;
		234 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101010;
		235 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101011;
		236 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101100;
		237 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101101;
		238 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101110;
		239 : SH_INVALID_CNT_MAX_BINARY <= 8'b11101111;
		240 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110000;
		241 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110001;
		242 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110010;
		243 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110011;
		244 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110100;
		245 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110101;
		246 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110110;
		247 : SH_INVALID_CNT_MAX_BINARY <= 8'b11110111;
		248 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111000;
		249 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111001;
		250 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111010;
		251 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111011;
		252 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111100;
		253 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111101;
		254 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111110;
		255 : SH_INVALID_CNT_MAX_BINARY <= 8'b11111111;
		default : begin
			$display("Attribute Syntax Error : The Attribute SH_INVALID_CNT_MAX on GT10 instance %m is set to %d.  Legal values for this attribute are 0 to 255.", SH_INVALID_CNT_MAX);
			$finish;
		end
	endcase

	case (TX_BUFFER_USE)
		"FALSE" : TX_BUFFER_USE_BINARY <= 0;
		"TRUE" : TX_BUFFER_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute TX_BUFFER_USE on GT10 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", TX_BUFFER_USE);
			$finish;
		end
	endcase

end

buf B_CHBONDDONE (CHBONDDONE, CHBONDDONE_OUT);
buf B_CHBONDO0 (CHBONDO[0], CHBONDO_OUT[0]);
buf B_CHBONDO1 (CHBONDO[1], CHBONDO_OUT[1]);
buf B_CHBONDO2 (CHBONDO[2], CHBONDO_OUT[2]);
buf B_CHBONDO3 (CHBONDO[3], CHBONDO_OUT[3]);
buf B_CHBONDO4 (CHBONDO[4], CHBONDO_OUT[4]);
buf B_PMARXLOCK (PMARXLOCK, PMARXLOCK_OUT);
buf B_RXBUFSTATUS0 (RXBUFSTATUS[0], RXBUFSTATUS_OUT[0]);
buf B_RXBUFSTATUS1 (RXBUFSTATUS[1], RXBUFSTATUS_OUT[1]);
buf B_RXCHARISCOMMA0 (RXCHARISCOMMA[0], RXCHARISCOMMA_OUT[0]);
buf B_RXCHARISCOMMA1 (RXCHARISCOMMA[1], RXCHARISCOMMA_OUT[1]);
buf B_RXCHARISCOMMA2 (RXCHARISCOMMA[2], RXCHARISCOMMA_OUT[2]);
buf B_RXCHARISCOMMA3 (RXCHARISCOMMA[3], RXCHARISCOMMA_OUT[3]);
buf B_RXCHARISCOMMA4 (RXCHARISCOMMA[4], RXCHARISCOMMA_OUT[4]);
buf B_RXCHARISCOMMA5 (RXCHARISCOMMA[5], RXCHARISCOMMA_OUT[5]);
buf B_RXCHARISCOMMA6 (RXCHARISCOMMA[6], RXCHARISCOMMA_OUT[6]);
buf B_RXCHARISCOMMA7 (RXCHARISCOMMA[7], RXCHARISCOMMA_OUT[7]);
buf B_RXCHARISK0 (RXCHARISK[0], RXCHARISK_OUT[0]);
buf B_RXCHARISK1 (RXCHARISK[1], RXCHARISK_OUT[1]);
buf B_RXCHARISK2 (RXCHARISK[2], RXCHARISK_OUT[2]);
buf B_RXCHARISK3 (RXCHARISK[3], RXCHARISK_OUT[3]);
buf B_RXCHARISK4 (RXCHARISK[4], RXCHARISK_OUT[4]);
buf B_RXCHARISK5 (RXCHARISK[5], RXCHARISK_OUT[5]);
buf B_RXCHARISK6 (RXCHARISK[6], RXCHARISK_OUT[6]);
buf B_RXCHARISK7 (RXCHARISK[7], RXCHARISK_OUT[7]);
buf B_RXCLKCORCNT0 (RXCLKCORCNT[0], RXCLKCORCNT_OUT[0]);
buf B_RXCLKCORCNT1 (RXCLKCORCNT[1], RXCLKCORCNT_OUT[1]);
buf B_RXCLKCORCNT2 (RXCLKCORCNT[2], RXCLKCORCNT_OUT[2]);
buf B_RXCOMMADET (RXCOMMADET, RXCOMMADET_OUT);
buf B_RXDATA0 (RXDATA[0], RXDATA_OUT[0]);
buf B_RXDATA1 (RXDATA[1], RXDATA_OUT[1]);
buf B_RXDATA2 (RXDATA[2], RXDATA_OUT[2]);
buf B_RXDATA3 (RXDATA[3], RXDATA_OUT[3]);
buf B_RXDATA4 (RXDATA[4], RXDATA_OUT[4]);
buf B_RXDATA5 (RXDATA[5], RXDATA_OUT[5]);
buf B_RXDATA6 (RXDATA[6], RXDATA_OUT[6]);
buf B_RXDATA7 (RXDATA[7], RXDATA_OUT[7]);
buf B_RXDATA8 (RXDATA[8], RXDATA_OUT[8]);
buf B_RXDATA9 (RXDATA[9], RXDATA_OUT[9]);
buf B_RXDATA10 (RXDATA[10], RXDATA_OUT[10]);
buf B_RXDATA11 (RXDATA[11], RXDATA_OUT[11]);
buf B_RXDATA12 (RXDATA[12], RXDATA_OUT[12]);
buf B_RXDATA13 (RXDATA[13], RXDATA_OUT[13]);
buf B_RXDATA14 (RXDATA[14], RXDATA_OUT[14]);
buf B_RXDATA15 (RXDATA[15], RXDATA_OUT[15]);
buf B_RXDATA16 (RXDATA[16], RXDATA_OUT[16]);
buf B_RXDATA17 (RXDATA[17], RXDATA_OUT[17]);
buf B_RXDATA18 (RXDATA[18], RXDATA_OUT[18]);
buf B_RXDATA19 (RXDATA[19], RXDATA_OUT[19]);
buf B_RXDATA20 (RXDATA[20], RXDATA_OUT[20]);
buf B_RXDATA21 (RXDATA[21], RXDATA_OUT[21]);
buf B_RXDATA22 (RXDATA[22], RXDATA_OUT[22]);
buf B_RXDATA23 (RXDATA[23], RXDATA_OUT[23]);
buf B_RXDATA24 (RXDATA[24], RXDATA_OUT[24]);
buf B_RXDATA25 (RXDATA[25], RXDATA_OUT[25]);
buf B_RXDATA26 (RXDATA[26], RXDATA_OUT[26]);
buf B_RXDATA27 (RXDATA[27], RXDATA_OUT[27]);
buf B_RXDATA28 (RXDATA[28], RXDATA_OUT[28]);
buf B_RXDATA29 (RXDATA[29], RXDATA_OUT[29]);
buf B_RXDATA30 (RXDATA[30], RXDATA_OUT[30]);
buf B_RXDATA31 (RXDATA[31], RXDATA_OUT[31]);
buf B_RXDATA32 (RXDATA[32], RXDATA_OUT[32]);
buf B_RXDATA33 (RXDATA[33], RXDATA_OUT[33]);
buf B_RXDATA34 (RXDATA[34], RXDATA_OUT[34]);
buf B_RXDATA35 (RXDATA[35], RXDATA_OUT[35]);
buf B_RXDATA36 (RXDATA[36], RXDATA_OUT[36]);
buf B_RXDATA37 (RXDATA[37], RXDATA_OUT[37]);
buf B_RXDATA38 (RXDATA[38], RXDATA_OUT[38]);
buf B_RXDATA39 (RXDATA[39], RXDATA_OUT[39]);
buf B_RXDATA40 (RXDATA[40], RXDATA_OUT[40]);
buf B_RXDATA41 (RXDATA[41], RXDATA_OUT[41]);
buf B_RXDATA42 (RXDATA[42], RXDATA_OUT[42]);
buf B_RXDATA43 (RXDATA[43], RXDATA_OUT[43]);
buf B_RXDATA44 (RXDATA[44], RXDATA_OUT[44]);
buf B_RXDATA45 (RXDATA[45], RXDATA_OUT[45]);
buf B_RXDATA46 (RXDATA[46], RXDATA_OUT[46]);
buf B_RXDATA47 (RXDATA[47], RXDATA_OUT[47]);
buf B_RXDATA48 (RXDATA[48], RXDATA_OUT[48]);
buf B_RXDATA49 (RXDATA[49], RXDATA_OUT[49]);
buf B_RXDATA50 (RXDATA[50], RXDATA_OUT[50]);
buf B_RXDATA51 (RXDATA[51], RXDATA_OUT[51]);
buf B_RXDATA52 (RXDATA[52], RXDATA_OUT[52]);
buf B_RXDATA53 (RXDATA[53], RXDATA_OUT[53]);
buf B_RXDATA54 (RXDATA[54], RXDATA_OUT[54]);
buf B_RXDATA55 (RXDATA[55], RXDATA_OUT[55]);
buf B_RXDATA56 (RXDATA[56], RXDATA_OUT[56]);
buf B_RXDATA57 (RXDATA[57], RXDATA_OUT[57]);
buf B_RXDATA58 (RXDATA[58], RXDATA_OUT[58]);
buf B_RXDATA59 (RXDATA[59], RXDATA_OUT[59]);
buf B_RXDATA60 (RXDATA[60], RXDATA_OUT[60]);
buf B_RXDATA61 (RXDATA[61], RXDATA_OUT[61]);
buf B_RXDATA62 (RXDATA[62], RXDATA_OUT[62]);
buf B_RXDATA63 (RXDATA[63], RXDATA_OUT[63]);
buf B_RXDISPERR0 (RXDISPERR[0], RXDISPERR_OUT[0]);
buf B_RXDISPERR1 (RXDISPERR[1], RXDISPERR_OUT[1]);
buf B_RXDISPERR2 (RXDISPERR[2], RXDISPERR_OUT[2]);
buf B_RXDISPERR3 (RXDISPERR[3], RXDISPERR_OUT[3]);
buf B_RXDISPERR4 (RXDISPERR[4], RXDISPERR_OUT[4]);
buf B_RXDISPERR5 (RXDISPERR[5], RXDISPERR_OUT[5]);
buf B_RXDISPERR6 (RXDISPERR[6], RXDISPERR_OUT[6]);
buf B_RXDISPERR7 (RXDISPERR[7], RXDISPERR_OUT[7]);
buf B_RXLOSSOFSYNC0 (RXLOSSOFSYNC[0], RXLOSSOFSYNC_OUT[0]);
buf B_RXLOSSOFSYNC1 (RXLOSSOFSYNC[1], RXLOSSOFSYNC_OUT[1]);
buf B_RXNOTINTABLE0 (RXNOTINTABLE[0], RXNOTINTABLE_OUT[0]);
buf B_RXNOTINTABLE1 (RXNOTINTABLE[1], RXNOTINTABLE_OUT[1]);
buf B_RXNOTINTABLE2 (RXNOTINTABLE[2], RXNOTINTABLE_OUT[2]);
buf B_RXNOTINTABLE3 (RXNOTINTABLE[3], RXNOTINTABLE_OUT[3]);
buf B_RXNOTINTABLE4 (RXNOTINTABLE[4], RXNOTINTABLE_OUT[4]);
buf B_RXNOTINTABLE5 (RXNOTINTABLE[5], RXNOTINTABLE_OUT[5]);
buf B_RXNOTINTABLE6 (RXNOTINTABLE[6], RXNOTINTABLE_OUT[6]);
buf B_RXNOTINTABLE7 (RXNOTINTABLE[7], RXNOTINTABLE_OUT[7]);
buf B_RXREALIGN (RXREALIGN, RXREALIGN_OUT);
buf B_RXRECCLK (RXRECCLK, RXRECCLK_OUT);
buf B_RXRUNDISP0 (RXRUNDISP[0], RXRUNDISP_OUT[0]);
buf B_RXRUNDISP1 (RXRUNDISP[1], RXRUNDISP_OUT[1]);
buf B_RXRUNDISP2 (RXRUNDISP[2], RXRUNDISP_OUT[2]);
buf B_RXRUNDISP3 (RXRUNDISP[3], RXRUNDISP_OUT[3]);
buf B_RXRUNDISP4 (RXRUNDISP[4], RXRUNDISP_OUT[4]);
buf B_RXRUNDISP5 (RXRUNDISP[5], RXRUNDISP_OUT[5]);
buf B_RXRUNDISP6 (RXRUNDISP[6], RXRUNDISP_OUT[6]);
buf B_RXRUNDISP7 (RXRUNDISP[7], RXRUNDISP_OUT[7]);
buf B_TXBUFERR (TXBUFERR, TXBUFERR_OUT);
buf B_TXKERR0 (TXKERR[0], TXKERR_OUT[0]);
buf B_TXKERR1 (TXKERR[1], TXKERR_OUT[1]);
buf B_TXKERR2 (TXKERR[2], TXKERR_OUT[2]);
buf B_TXKERR3 (TXKERR[3], TXKERR_OUT[3]);
buf B_TXKERR4 (TXKERR[4], TXKERR_OUT[4]);
buf B_TXKERR5 (TXKERR[5], TXKERR_OUT[5]);
buf B_TXKERR6 (TXKERR[6], TXKERR_OUT[6]);
buf B_TXKERR7 (TXKERR[7], TXKERR_OUT[7]);
// buf B_TXN (TXN, TXN_OUT);
buf B_TXOUTCLK (TXOUTCLK, TXOUTCLK_OUT);
// buf B_TXP (TXP, TXP_OUT);
buf B_TXRUNDISP0 (TXRUNDISP[0], TXRUNDISP_OUT[0]);
buf B_TXRUNDISP1 (TXRUNDISP[1], TXRUNDISP_OUT[1]);
buf B_TXRUNDISP2 (TXRUNDISP[2], TXRUNDISP_OUT[2]);
buf B_TXRUNDISP3 (TXRUNDISP[3], TXRUNDISP_OUT[3]);
buf B_TXRUNDISP4 (TXRUNDISP[4], TXRUNDISP_OUT[4]);
buf B_TXRUNDISP5 (TXRUNDISP[5], TXRUNDISP_OUT[5]);
buf B_TXRUNDISP6 (TXRUNDISP[6], TXRUNDISP_OUT[6]);
buf B_TXRUNDISP7 (TXRUNDISP[7], TXRUNDISP_OUT[7]);

buf B_BREFCLKNIN (BREFCLKNIN_IN, BREFCLKNIN);
buf B_BREFCLKPIN (BREFCLKPIN_IN, BREFCLKPIN);
buf B_CHBONDI0 (CHBONDI_IN[0], CHBONDI[0]);
buf B_CHBONDI1 (CHBONDI_IN[1], CHBONDI[1]);
buf B_CHBONDI2 (CHBONDI_IN[2], CHBONDI[2]);
buf B_CHBONDI3 (CHBONDI_IN[3], CHBONDI[3]);
buf B_CHBONDI4 (CHBONDI_IN[4], CHBONDI[4]);
buf B_ENCHANSYNC (ENCHANSYNC_IN, ENCHANSYNC);
buf B_ENMCOMMAALIGN (ENMCOMMAALIGN_IN, ENMCOMMAALIGN);
buf B_ENPCOMMAALIGN (ENPCOMMAALIGN_IN, ENPCOMMAALIGN);
buf B_LOOPBACK0 (LOOPBACK_IN[0], LOOPBACK[0]);
buf B_LOOPBACK1 (LOOPBACK_IN[1], LOOPBACK[1]);
buf B_PMAINIT (PMAINIT_IN, PMAINIT);
buf B_PMAREGADDR0 (PMAREGADDR_IN[0], PMAREGADDR[0]);
buf B_PMAREGADDR1 (PMAREGADDR_IN[1], PMAREGADDR[1]);
buf B_PMAREGADDR2 (PMAREGADDR_IN[2], PMAREGADDR[2]);
buf B_PMAREGADDR3 (PMAREGADDR_IN[3], PMAREGADDR[3]);
buf B_PMAREGADDR4 (PMAREGADDR_IN[4], PMAREGADDR[4]);
buf B_PMAREGADDR5 (PMAREGADDR_IN[5], PMAREGADDR[5]);
buf B_PMAREGDATAIN0 (PMAREGDATAIN_IN[0], PMAREGDATAIN[0]);
buf B_PMAREGDATAIN1 (PMAREGDATAIN_IN[1], PMAREGDATAIN[1]);
buf B_PMAREGDATAIN2 (PMAREGDATAIN_IN[2], PMAREGDATAIN[2]);
buf B_PMAREGDATAIN3 (PMAREGDATAIN_IN[3], PMAREGDATAIN[3]);
buf B_PMAREGDATAIN4 (PMAREGDATAIN_IN[4], PMAREGDATAIN[4]);
buf B_PMAREGDATAIN5 (PMAREGDATAIN_IN[5], PMAREGDATAIN[5]);
buf B_PMAREGDATAIN6 (PMAREGDATAIN_IN[6], PMAREGDATAIN[6]);
buf B_PMAREGDATAIN7 (PMAREGDATAIN_IN[7], PMAREGDATAIN[7]);
buf B_PMAREGRW (PMAREGRW_IN, PMAREGRW);
buf B_PMAREGSTROBE (PMAREGSTROBE_IN, PMAREGSTROBE);
buf B_PMARXLOCKSEL0 (PMARXLOCKSEL_IN[0], PMARXLOCKSEL[0]);
buf B_PMARXLOCKSEL1 (PMARXLOCKSEL_IN[1], PMARXLOCKSEL[1]);
buf B_POWERDOWN (POWERDOWN_IN, POWERDOWN);
buf B_REFCLK (REFCLK_IN, REFCLK);
buf B_REFCLK2 (REFCLK2_IN, REFCLK2);
buf B_REFCLKBSEL (REFCLKBSEL_IN, REFCLKBSEL);
buf B_REFCLKSEL (REFCLKSEL_IN, REFCLKSEL);
buf B_RXBLOCKSYNC64B66BUSE (RXBLOCKSYNC64B66BUSE_IN, RXBLOCKSYNC64B66BUSE);
buf B_RXCOMMADETUSE (RXCOMMADETUSE_IN, RXCOMMADETUSE);
buf B_RXDATAWIDTH0 (RXDATAWIDTH_IN[0], RXDATAWIDTH[0]);
buf B_RXDATAWIDTH1 (RXDATAWIDTH_IN[1], RXDATAWIDTH[1]);
buf B_RXDEC64B66BUSE (RXDEC64B66BUSE_IN, RXDEC64B66BUSE);
buf B_RXDEC8B10BUSE (RXDEC8B10BUSE_IN, RXDEC8B10BUSE);
buf B_RXDESCRAM64B66BUSE (RXDESCRAM64B66BUSE_IN, RXDESCRAM64B66BUSE);
buf B_RXIGNOREBTF (RXIGNOREBTF_IN, RXIGNOREBTF);
buf B_RXINTDATAWIDTH0 (RXINTDATAWIDTH_IN[0], RXINTDATAWIDTH[0]);
buf B_RXINTDATAWIDTH1 (RXINTDATAWIDTH_IN[1], RXINTDATAWIDTH[1]);
buf B_RXN (RXN_IN, RXN);
buf B_RXP (RXP_IN, RXP);
buf B_RXPOLARITY (RXPOLARITY_IN, RXPOLARITY);
buf B_RXRESET (RXRESET_IN, RXRESET);
buf B_RXSLIDE (RXSLIDE_IN, RXSLIDE);
buf B_RXUSRCLK (RXUSRCLK_IN, RXUSRCLK);
buf B_RXUSRCLK2 (RXUSRCLK2_IN, RXUSRCLK2);
buf B_TXBYPASS8B10B0 (TXBYPASS8B10B_IN[0], TXBYPASS8B10B[0]);
buf B_TXBYPASS8B10B1 (TXBYPASS8B10B_IN[1], TXBYPASS8B10B[1]);
buf B_TXBYPASS8B10B2 (TXBYPASS8B10B_IN[2], TXBYPASS8B10B[2]);
buf B_TXBYPASS8B10B3 (TXBYPASS8B10B_IN[3], TXBYPASS8B10B[3]);
buf B_TXBYPASS8B10B4 (TXBYPASS8B10B_IN[4], TXBYPASS8B10B[4]);
buf B_TXBYPASS8B10B5 (TXBYPASS8B10B_IN[5], TXBYPASS8B10B[5]);
buf B_TXBYPASS8B10B6 (TXBYPASS8B10B_IN[6], TXBYPASS8B10B[6]);
buf B_TXBYPASS8B10B7 (TXBYPASS8B10B_IN[7], TXBYPASS8B10B[7]);
buf B_TXCHARDISPMODE0 (TXCHARDISPMODE_IN[0], TXCHARDISPMODE[0]);
buf B_TXCHARDISPMODE1 (TXCHARDISPMODE_IN[1], TXCHARDISPMODE[1]);
buf B_TXCHARDISPMODE2 (TXCHARDISPMODE_IN[2], TXCHARDISPMODE[2]);
buf B_TXCHARDISPMODE3 (TXCHARDISPMODE_IN[3], TXCHARDISPMODE[3]);
buf B_TXCHARDISPMODE4 (TXCHARDISPMODE_IN[4], TXCHARDISPMODE[4]);
buf B_TXCHARDISPMODE5 (TXCHARDISPMODE_IN[5], TXCHARDISPMODE[5]);
buf B_TXCHARDISPMODE6 (TXCHARDISPMODE_IN[6], TXCHARDISPMODE[6]);
buf B_TXCHARDISPMODE7 (TXCHARDISPMODE_IN[7], TXCHARDISPMODE[7]);
buf B_TXCHARDISPVAL0 (TXCHARDISPVAL_IN[0], TXCHARDISPVAL[0]);
buf B_TXCHARDISPVAL1 (TXCHARDISPVAL_IN[1], TXCHARDISPVAL[1]);
buf B_TXCHARDISPVAL2 (TXCHARDISPVAL_IN[2], TXCHARDISPVAL[2]);
buf B_TXCHARDISPVAL3 (TXCHARDISPVAL_IN[3], TXCHARDISPVAL[3]);
buf B_TXCHARDISPVAL4 (TXCHARDISPVAL_IN[4], TXCHARDISPVAL[4]);
buf B_TXCHARDISPVAL5 (TXCHARDISPVAL_IN[5], TXCHARDISPVAL[5]);
buf B_TXCHARDISPVAL6 (TXCHARDISPVAL_IN[6], TXCHARDISPVAL[6]);
buf B_TXCHARDISPVAL7 (TXCHARDISPVAL_IN[7], TXCHARDISPVAL[7]);
buf B_TXCHARISK0 (TXCHARISK_IN[0], TXCHARISK[0]);
buf B_TXCHARISK1 (TXCHARISK_IN[1], TXCHARISK[1]);
buf B_TXCHARISK2 (TXCHARISK_IN[2], TXCHARISK[2]);
buf B_TXCHARISK3 (TXCHARISK_IN[3], TXCHARISK[3]);
buf B_TXCHARISK4 (TXCHARISK_IN[4], TXCHARISK[4]);
buf B_TXCHARISK5 (TXCHARISK_IN[5], TXCHARISK[5]);
buf B_TXCHARISK6 (TXCHARISK_IN[6], TXCHARISK[6]);
buf B_TXCHARISK7 (TXCHARISK_IN[7], TXCHARISK[7]);
buf B_TXDATA0 (TXDATA_IN[0], TXDATA[0]);
buf B_TXDATA1 (TXDATA_IN[1], TXDATA[1]);
buf B_TXDATA2 (TXDATA_IN[2], TXDATA[2]);
buf B_TXDATA3 (TXDATA_IN[3], TXDATA[3]);
buf B_TXDATA4 (TXDATA_IN[4], TXDATA[4]);
buf B_TXDATA5 (TXDATA_IN[5], TXDATA[5]);
buf B_TXDATA6 (TXDATA_IN[6], TXDATA[6]);
buf B_TXDATA7 (TXDATA_IN[7], TXDATA[7]);
buf B_TXDATA8 (TXDATA_IN[8], TXDATA[8]);
buf B_TXDATA9 (TXDATA_IN[9], TXDATA[9]);
buf B_TXDATA10 (TXDATA_IN[10], TXDATA[10]);
buf B_TXDATA11 (TXDATA_IN[11], TXDATA[11]);
buf B_TXDATA12 (TXDATA_IN[12], TXDATA[12]);
buf B_TXDATA13 (TXDATA_IN[13], TXDATA[13]);
buf B_TXDATA14 (TXDATA_IN[14], TXDATA[14]);
buf B_TXDATA15 (TXDATA_IN[15], TXDATA[15]);
buf B_TXDATA16 (TXDATA_IN[16], TXDATA[16]);
buf B_TXDATA17 (TXDATA_IN[17], TXDATA[17]);
buf B_TXDATA18 (TXDATA_IN[18], TXDATA[18]);
buf B_TXDATA19 (TXDATA_IN[19], TXDATA[19]);
buf B_TXDATA20 (TXDATA_IN[20], TXDATA[20]);
buf B_TXDATA21 (TXDATA_IN[21], TXDATA[21]);
buf B_TXDATA22 (TXDATA_IN[22], TXDATA[22]);
buf B_TXDATA23 (TXDATA_IN[23], TXDATA[23]);
buf B_TXDATA24 (TXDATA_IN[24], TXDATA[24]);
buf B_TXDATA25 (TXDATA_IN[25], TXDATA[25]);
buf B_TXDATA26 (TXDATA_IN[26], TXDATA[26]);
buf B_TXDATA27 (TXDATA_IN[27], TXDATA[27]);
buf B_TXDATA28 (TXDATA_IN[28], TXDATA[28]);
buf B_TXDATA29 (TXDATA_IN[29], TXDATA[29]);
buf B_TXDATA30 (TXDATA_IN[30], TXDATA[30]);
buf B_TXDATA31 (TXDATA_IN[31], TXDATA[31]);
buf B_TXDATA32 (TXDATA_IN[32], TXDATA[32]);
buf B_TXDATA33 (TXDATA_IN[33], TXDATA[33]);
buf B_TXDATA34 (TXDATA_IN[34], TXDATA[34]);
buf B_TXDATA35 (TXDATA_IN[35], TXDATA[35]);
buf B_TXDATA36 (TXDATA_IN[36], TXDATA[36]);
buf B_TXDATA37 (TXDATA_IN[37], TXDATA[37]);
buf B_TXDATA38 (TXDATA_IN[38], TXDATA[38]);
buf B_TXDATA39 (TXDATA_IN[39], TXDATA[39]);
buf B_TXDATA40 (TXDATA_IN[40], TXDATA[40]);
buf B_TXDATA41 (TXDATA_IN[41], TXDATA[41]);
buf B_TXDATA42 (TXDATA_IN[42], TXDATA[42]);
buf B_TXDATA43 (TXDATA_IN[43], TXDATA[43]);
buf B_TXDATA44 (TXDATA_IN[44], TXDATA[44]);
buf B_TXDATA45 (TXDATA_IN[45], TXDATA[45]);
buf B_TXDATA46 (TXDATA_IN[46], TXDATA[46]);
buf B_TXDATA47 (TXDATA_IN[47], TXDATA[47]);
buf B_TXDATA48 (TXDATA_IN[48], TXDATA[48]);
buf B_TXDATA49 (TXDATA_IN[49], TXDATA[49]);
buf B_TXDATA50 (TXDATA_IN[50], TXDATA[50]);
buf B_TXDATA51 (TXDATA_IN[51], TXDATA[51]);
buf B_TXDATA52 (TXDATA_IN[52], TXDATA[52]);
buf B_TXDATA53 (TXDATA_IN[53], TXDATA[53]);
buf B_TXDATA54 (TXDATA_IN[54], TXDATA[54]);
buf B_TXDATA55 (TXDATA_IN[55], TXDATA[55]);
buf B_TXDATA56 (TXDATA_IN[56], TXDATA[56]);
buf B_TXDATA57 (TXDATA_IN[57], TXDATA[57]);
buf B_TXDATA58 (TXDATA_IN[58], TXDATA[58]);
buf B_TXDATA59 (TXDATA_IN[59], TXDATA[59]);
buf B_TXDATA60 (TXDATA_IN[60], TXDATA[60]);
buf B_TXDATA61 (TXDATA_IN[61], TXDATA[61]);
buf B_TXDATA62 (TXDATA_IN[62], TXDATA[62]);
buf B_TXDATA63 (TXDATA_IN[63], TXDATA[63]);
buf B_TXDATAWIDTH0 (TXDATAWIDTH_IN[0], TXDATAWIDTH[0]);
buf B_TXDATAWIDTH1 (TXDATAWIDTH_IN[1], TXDATAWIDTH[1]);
buf B_TXENC64B66BUSE (TXENC64B66BUSE_IN, TXENC64B66BUSE);
buf B_TXENC8B10BUSE (TXENC8B10BUSE_IN, TXENC8B10BUSE);
buf B_TXGEARBOX64B66BUSE (TXGEARBOX64B66BUSE_IN, TXGEARBOX64B66BUSE);
buf B_TXINHIBIT (TXINHIBIT_IN, TXINHIBIT);
buf B_TXINTDATAWIDTH0 (TXINTDATAWIDTH_IN[0], TXINTDATAWIDTH[0]);
buf B_TXINTDATAWIDTH1 (TXINTDATAWIDTH_IN[1], TXINTDATAWIDTH[1]);
buf B_TXPOLARITY (TXPOLARITY_IN, TXPOLARITY);
buf B_TXRESET (TXRESET_IN, TXRESET);
buf B_TXSCRAM64B66BUSE (TXSCRAM64B66BUSE_IN, TXSCRAM64B66BUSE);
buf B_TXUSRCLK (TXUSRCLK_IN, TXUSRCLK);
buf B_TXUSRCLK2 (TXUSRCLK2_IN, TXUSRCLK2);

GT10_SWIFT gt10_swift_1 (
	.ALIGN_COMMA_WORD (ALIGN_COMMA_WORD_BINARY),
	.BREFCLKNIN (BREFCLKNIN_IN),
	.BREFCLKPIN (BREFCLKPIN_IN),
	.CHAN_BOND_64B66B_SV (CHAN_BOND_64B66B_SV_BINARY),
	.CHAN_BOND_LIMIT (CHAN_BOND_LIMIT_BINARY),
	.CHAN_BOND_MODE (CHAN_BOND_MODE_BINARY),
	.CHAN_BOND_ONE_SHOT (CHAN_BOND_ONE_SHOT_BINARY),
	.CHAN_BOND_SEQ_1_1 (CHAN_BOND_SEQ_1_1),
	.CHAN_BOND_SEQ_1_2 (CHAN_BOND_SEQ_1_2),
	.CHAN_BOND_SEQ_1_3 (CHAN_BOND_SEQ_1_3),
	.CHAN_BOND_SEQ_1_4 (CHAN_BOND_SEQ_1_4),
	.CHAN_BOND_SEQ_1_MASK (CHAN_BOND_SEQ_1_MASK),
	.CHAN_BOND_SEQ_2_1 (CHAN_BOND_SEQ_2_1),
	.CHAN_BOND_SEQ_2_2 (CHAN_BOND_SEQ_2_2),
	.CHAN_BOND_SEQ_2_3 (CHAN_BOND_SEQ_2_3),
	.CHAN_BOND_SEQ_2_4 (CHAN_BOND_SEQ_2_4),
	.CHAN_BOND_SEQ_2_MASK (CHAN_BOND_SEQ_2_MASK),
	.CHAN_BOND_SEQ_2_USE (CHAN_BOND_SEQ_2_USE_BINARY),
	.CHAN_BOND_SEQ_LEN (CHAN_BOND_SEQ_LEN_BINARY),
	.CHBONDDONE (CHBONDDONE_OUT),
	.CHBONDI (CHBONDI_IN),
	.CHBONDO (CHBONDO_OUT),
	.CLK_CORRECT_USE (CLK_CORRECT_USE_BINARY),
	.CLK_COR_8B10B_DE (CLK_COR_8B10B_DE_BINARY),
	.CLK_COR_MAX_LAT (CLK_COR_MAX_LAT_BINARY),
	.CLK_COR_MIN_LAT (CLK_COR_MIN_LAT_BINARY),
	.CLK_COR_SEQ_1_1 (CLK_COR_SEQ_1_1),
	.CLK_COR_SEQ_1_2 (CLK_COR_SEQ_1_2),
	.CLK_COR_SEQ_1_3 (CLK_COR_SEQ_1_3),
	.CLK_COR_SEQ_1_4 (CLK_COR_SEQ_1_4),
	.CLK_COR_SEQ_1_MASK (CLK_COR_SEQ_1_MASK),
	.CLK_COR_SEQ_2_1 (CLK_COR_SEQ_2_1),
	.CLK_COR_SEQ_2_2 (CLK_COR_SEQ_2_2),
	.CLK_COR_SEQ_2_3 (CLK_COR_SEQ_2_3),
	.CLK_COR_SEQ_2_4 (CLK_COR_SEQ_2_4),
	.CLK_COR_SEQ_2_MASK (CLK_COR_SEQ_2_MASK),
	.CLK_COR_SEQ_2_USE (CLK_COR_SEQ_2_USE_BINARY),
	.CLK_COR_SEQ_DROP (CLK_COR_SEQ_DROP_BINARY),
	.CLK_COR_SEQ_LEN (CLK_COR_SEQ_LEN_BINARY),
	.COMMA_10B_MASK (COMMA_10B_MASK),
	.DEC_MCOMMA_DETECT (DEC_MCOMMA_DETECT_BINARY),
	.DEC_PCOMMA_DETECT (DEC_PCOMMA_DETECT_BINARY),
	.DEC_VALID_COMMA_ONLY (DEC_VALID_COMMA_ONLY_BINARY),
	.ENCHANSYNC (ENCHANSYNC_IN),
	.ENMCOMMAALIGN (ENMCOMMAALIGN_IN),
	.ENPCOMMAALIGN (ENPCOMMAALIGN_IN),
	.GSR (GSR),
	.LOOPBACK (LOOPBACK_IN),
	.MCOMMA_10B_VALUE (MCOMMA_10B_VALUE),
	.MCOMMA_DETECT (MCOMMA_DETECT_BINARY),
	.PCOMMA_10B_VALUE (PCOMMA_10B_VALUE),
	.PCOMMA_DETECT (PCOMMA_DETECT_BINARY),
	.PMAINIT (PMAINIT_IN),
	.PMAREGADDR (PMAREGADDR_IN),
	.PMAREGDATAIN (PMAREGDATAIN_IN),
	.PMAREGRW (PMAREGRW_IN),
	.PMAREGSTROBE (PMAREGSTROBE_IN),
	.PMARXLOCK (PMARXLOCK_OUT),
	.PMARXLOCKSEL (PMARXLOCKSEL_IN),
	.PMA_PWR_CNTRL (PMA_PWR_CNTRL),
	.PMA_SPEED (PMA_SPEED_BINARY),
	.POWERDOWN (POWERDOWN_IN),
	.REFCLK (REFCLK_IN),
	.REFCLK2 (REFCLK2_IN),
	.REFCLKBSEL (REFCLKBSEL_IN),
	.REFCLKSEL (REFCLKSEL_IN),
	.RXBLOCKSYNC64B66BUSE (RXBLOCKSYNC64B66BUSE_IN),
	.RXBUFSTATUS (RXBUFSTATUS_OUT),
	.RXCHARISCOMMA (RXCHARISCOMMA_OUT),
	.RXCHARISK (RXCHARISK_OUT),
	.RXCLKCORCNT (RXCLKCORCNT_OUT),
	.RXCOMMADET (RXCOMMADET_OUT),
	.RXCOMMADETUSE (RXCOMMADETUSE_IN),
	.RXDATA (RXDATA_OUT),
	.RXDATAWIDTH (RXDATAWIDTH_IN),
	.RXDEC64B66BUSE (RXDEC64B66BUSE_IN),
	.RXDEC8B10BUSE (RXDEC8B10BUSE_IN),
	.RXDESCRAM64B66BUSE (RXDESCRAM64B66BUSE_IN),
	.RXDISPERR (RXDISPERR_OUT),
	.RXIGNOREBTF (RXIGNOREBTF_IN),
	.RXINTDATAWIDTH (RXINTDATAWIDTH_IN),
	.RXLOSSOFSYNC (RXLOSSOFSYNC_OUT),
	.RXN (RXN_IN),
	.RXNOTINTABLE (RXNOTINTABLE_OUT),
	.RXP (RXP_IN),
	.RXPOLARITY (RXPOLARITY_IN),
	.RXREALIGN (RXREALIGN_OUT),
	.RXRECCLK (RXRECCLK_OUT),
	.RXRESET (RXRESET_IN),
	.RXRUNDISP (RXRUNDISP_OUT),
	.RXSLIDE (RXSLIDE_IN),
	.RXUSRCLK (RXUSRCLK_IN),
	.RXUSRCLK2 (RXUSRCLK2_IN),
	.RX_BUFFER_USE (RX_BUFFER_USE_BINARY),
	.RX_LOSS_OF_SYNC_FSM (RX_LOSS_OF_SYNC_FSM_BINARY),
	.RX_LOS_INVALID_INCR (RX_LOS_INVALID_INCR_BINARY),
	.RX_LOS_THRESHOLD (RX_LOS_THRESHOLD_BINARY),
	.SH_CNT_MAX (SH_CNT_MAX_BINARY),
	.SH_INVALID_CNT_MAX (SH_INVALID_CNT_MAX_BINARY),
	.TXBUFERR (TXBUFERR_OUT),
	.TXBYPASS8B10B (TXBYPASS8B10B_IN),
	.TXCHARDISPMODE (TXCHARDISPMODE_IN),
	.TXCHARDISPVAL (TXCHARDISPVAL_IN),
	.TXCHARISK (TXCHARISK_IN),
	.TXDATA (TXDATA_IN),
	.TXDATAWIDTH (TXDATAWIDTH_IN),
	.TXENC64B66BUSE (TXENC64B66BUSE_IN),
	.TXENC8B10BUSE (TXENC8B10BUSE_IN),
	.TXGEARBOX64B66BUSE (TXGEARBOX64B66BUSE_IN),
	.TXINHIBIT (TXINHIBIT_IN),
	.TXINTDATAWIDTH (TXINTDATAWIDTH_IN),
	.TXKERR (TXKERR_OUT),
	.TXN (TXN),
	.TXOUTCLK (TXOUTCLK_OUT),
	.TXP (TXP),
	.TXPOLARITY (TXPOLARITY_IN),
	.TXRESET (TXRESET_IN),
	.TXRUNDISP (TXRUNDISP_OUT),
	.TXSCRAM64B66BUSE (TXSCRAM64B66BUSE_IN),
	.TXUSRCLK (TXUSRCLK_IN),
	.TXUSRCLK2 (TXUSRCLK2_IN),
	.TX_BUFFER_USE (TX_BUFFER_USE_BINARY)
);

specify
	(RXUSRCLK *> CHBONDO) = (0, 0);
	(RXUSRCLK2 *> RXBUFSTATUS) = (0, 0);
	(RXUSRCLK2 *> RXCHARISCOMMA) = (0, 0);
	(RXUSRCLK2 *> RXCHARISK) = (0, 0);
	(RXUSRCLK2 *> RXCLKCORCNT) = (0, 0);
	(RXUSRCLK2 *> RXDATA) = (0, 0);
	(RXUSRCLK2 *> RXDISPERR) = (0, 0);
	(RXUSRCLK2 *> RXLOSSOFSYNC) = (0, 0);
	(RXUSRCLK2 *> RXNOTINTABLE) = (0, 0);
	(RXUSRCLK2 *> RXRUNDISP) = (0, 0);
	(RXUSRCLK2 => CHBONDDONE) = (0, 0);
	(RXUSRCLK2 => RXCOMMADET) = (0, 0);
	(RXUSRCLK2 => RXREALIGN) = (0, 0);
	(TXUSRCLK2 *> TXKERR) = (0, 0);
	(TXUSRCLK2 *> TXRUNDISP) = (0, 0);
	(TXUSRCLK2 => TXBUFERR) = (0, 0);
endspecify
endmodule
