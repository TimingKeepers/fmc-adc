---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for UTC core registers
---------------------------------------------------------------------------------------
-- File           : ../rtl/utc_core_regs.vhd
-- Author         : auto-generated by wbgen2 from utc_core_regs.wb
-- Created        : Thu Nov 17 14:30:00 2011
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE utc_core_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity utc_core_regs is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(3 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
-- Port for std_logic_vector field: 'UTC seconds' in reg: 'UTC seconds register'
    utc_core_seconds_o                       : out    std_logic_vector(31 downto 0);
    utc_core_seconds_i                       : in     std_logic_vector(31 downto 0);
    utc_core_seconds_load_o                  : out    std_logic;
-- Port for std_logic_vector field: 'UTC coarse time' in reg: 'UTC coarse time register, system clock ticks (125MHz)'
    utc_core_coarse_o                        : out    std_logic_vector(31 downto 0);
    utc_core_coarse_i                        : in     std_logic_vector(31 downto 0);
    utc_core_coarse_load_o                   : out    std_logic;
-- Port for std_logic_vector field: 'Trigger time-tag metadata' in reg: 'Trigger time-tag metadata register'
    utc_core_trig_tag_meta_i                 : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Trigger time-tag UTC seconds' in reg: 'Trigger time-tag UTC seconds register'
    utc_core_trig_tag_seconds_i              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Trigger time-tag coarse time' in reg: 'Trigger time-tag coarse time (system clock ticks 125MHz) register'
    utc_core_trig_tag_coarse_i               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Trigger time-tag fine time' in reg: 'Trigger time-tag fine time register, always 0 (used for time-tag format compatibility)'
    utc_core_trig_tag_fine_i                 : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag metadata' in reg: 'Acquisition start time-tag metadata register'
    utc_core_acq_start_tag_meta_i            : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag UTC seconds' in reg: 'Acquisition start time-tag UTC seconds register'
    utc_core_acq_start_tag_seconds_i         : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag coarse time' in reg: 'Acquisition start time-tag coarse time (system clock ticks 125MHz) register'
    utc_core_acq_start_tag_coarse_i          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag fine time' in reg: 'Acquisition start time-tag fine time register, always 0 (used for time-tag format compatibility)'
    utc_core_acq_start_tag_fine_i            : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag metadata' in reg: 'Acquisition stop time-tag metadata register'
    utc_core_acq_stop_tag_meta_i             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag UTC seconds' in reg: 'Acquisition stop time-tag UTC seconds register'
    utc_core_acq_stop_tag_seconds_i          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag coarse time' in reg: 'Acquisition stop time-tag coarse time (system clock ticks 125MHz) register'
    utc_core_acq_stop_tag_coarse_i           : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag fine time' in reg: 'Acquisition stop time-tag fine time register, always 0 (used for time-tag format compatibility)'
    utc_core_acq_stop_tag_fine_i             : in     std_logic_vector(31 downto 0)
  );
end utc_core_regs;

architecture syn of utc_core_regs is

signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(3 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      utc_core_seconds_load_o <= '0';
      utc_core_coarse_load_o <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          utc_core_seconds_load_o <= '0';
          utc_core_coarse_load_o <= '0';
          ack_in_progress <= '0';
        else
          utc_core_seconds_load_o <= '0';
          utc_core_coarse_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(3 downto 0) is
          when "0000" => 
            if (wb_we_i = '1') then
              utc_core_seconds_load_o <= '1';
            else
              rddata_reg(31 downto 0) <= utc_core_seconds_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0001" => 
            if (wb_we_i = '1') then
              utc_core_coarse_load_o <= '1';
            else
              rddata_reg(31 downto 0) <= utc_core_coarse_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_trig_tag_meta_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_trig_tag_seconds_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_trig_tag_coarse_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_trig_tag_fine_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_start_tag_meta_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_start_tag_seconds_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_start_tag_coarse_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_start_tag_fine_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_stop_tag_meta_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_stop_tag_seconds_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_stop_tag_coarse_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= utc_core_acq_stop_tag_fine_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- UTC seconds
  utc_core_seconds_o <= wrdata_reg(31 downto 0);
-- UTC coarse time
  utc_core_coarse_o <= wrdata_reg(31 downto 0);
-- Trigger time-tag metadata
-- Trigger time-tag UTC seconds
-- Trigger time-tag coarse time
-- Trigger time-tag fine time
-- Acquisition start time-tag metadata
-- Acquisition start time-tag UTC seconds
-- Acquisition start time-tag coarse time
-- Acquisition start time-tag fine time
-- Acquisition stop time-tag metadata
-- Acquisition stop time-tag UTC seconds
-- Acquisition stop time-tag coarse time
-- Acquisition stop time-tag fine time
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
