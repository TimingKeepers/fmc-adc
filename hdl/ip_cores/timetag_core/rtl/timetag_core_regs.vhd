---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Time-tagging core registers
---------------------------------------------------------------------------------------
-- File           : ../rtl/timetag_core_regs.vhd
-- Author         : auto-generated by wbgen2 from timetag_core_regs.wb
-- Created        : Thu Jul  4 18:04:57 2013
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE timetag_core_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity timetag_core_regs is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(4 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
-- Port for std_logic_vector field: 'Timetag seconds' in reg: 'Timetag seconds register'
    timetag_core_seconds_o                   : out    std_logic_vector(31 downto 0);
    timetag_core_seconds_i                   : in     std_logic_vector(31 downto 0);
    timetag_core_seconds_load_o              : out    std_logic;
-- Port for std_logic_vector field: 'Timetag coarse time' in reg: 'Timetag coarse time register, system clock ticks (125MHz)'
    timetag_core_coarse_o                    : out    std_logic_vector(31 downto 0);
    timetag_core_coarse_i                    : in     std_logic_vector(31 downto 0);
    timetag_core_coarse_load_o               : out    std_logic;
-- Port for std_logic_vector field: 'Trigger time-tag metadata' in reg: 'Trigger time-tag metadata register'
    timetag_core_trig_tag_meta_i             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Trigger time-tag seconds' in reg: 'Trigger time-tag seconds register'
    timetag_core_trig_tag_seconds_i          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Trigger time-tag coarse time' in reg: 'Trigger time-tag coarse time (system clock ticks 125MHz) register'
    timetag_core_trig_tag_coarse_i           : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Trigger time-tag fine time' in reg: 'Trigger time-tag fine time register, always 0 (used for time-tag format compatibility)'
    timetag_core_trig_tag_fine_i             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag metadata' in reg: 'Acquisition start time-tag metadata register'
    timetag_core_acq_start_tag_meta_i        : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag seconds' in reg: 'Acquisition start time-tag seconds register'
    timetag_core_acq_start_tag_seconds_i     : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag coarse time' in reg: 'Acquisition start time-tag coarse time (system clock ticks 125MHz) register'
    timetag_core_acq_start_tag_coarse_i      : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition start time-tag fine time' in reg: 'Acquisition start time-tag fine time register, always 0 (used for time-tag format compatibility)'
    timetag_core_acq_start_tag_fine_i        : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag metadata' in reg: 'Acquisition stop time-tag metadata register'
    timetag_core_acq_stop_tag_meta_i         : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag seconds' in reg: 'Acquisition stop time-tag seconds register'
    timetag_core_acq_stop_tag_seconds_i      : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag coarse time' in reg: 'Acquisition stop time-tag coarse time (system clock ticks 125MHz) register'
    timetag_core_acq_stop_tag_coarse_i       : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition stop time-tag fine time' in reg: 'Acquisition stop time-tag fine time register, always 0 (used for time-tag format compatibility)'
    timetag_core_acq_stop_tag_fine_i         : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition end time-tag metadata' in reg: 'Acquisition end time-tag metadata register'
    timetag_core_acq_end_tag_meta_i          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition end time-tag seconds' in reg: 'Acquisition end time-tag seconds register'
    timetag_core_acq_end_tag_seconds_i       : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition end time-tag coarse time' in reg: 'Acquisition end time-tag coarse time (system clock ticks 125MHz) register'
    timetag_core_acq_end_tag_coarse_i        : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Acquisition end time-tag fine time' in reg: 'Acquisition end time-tag fine time register, always 0 (used for time-tag format compatibility)'
    timetag_core_acq_end_tag_fine_i          : in     std_logic_vector(31 downto 0)
  );
end timetag_core_regs;

architecture syn of timetag_core_regs is

signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(4 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      timetag_core_seconds_load_o <= '0';
      timetag_core_coarse_load_o <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          timetag_core_seconds_load_o <= '0';
          timetag_core_coarse_load_o <= '0';
          ack_in_progress <= '0';
        else
          timetag_core_seconds_load_o <= '0';
          timetag_core_coarse_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(4 downto 0) is
          when "00000" => 
            if (wb_we_i = '1') then
              timetag_core_seconds_load_o <= '1';
            end if;
            rddata_reg(31 downto 0) <= timetag_core_seconds_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001" => 
            if (wb_we_i = '1') then
              timetag_core_coarse_load_o <= '1';
            end if;
            rddata_reg(31 downto 0) <= timetag_core_coarse_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_trig_tag_meta_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_trig_tag_seconds_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_trig_tag_coarse_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_trig_tag_fine_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_start_tag_meta_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_start_tag_seconds_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_start_tag_coarse_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_start_tag_fine_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_stop_tag_meta_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_stop_tag_seconds_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_stop_tag_coarse_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_stop_tag_fine_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_end_tag_meta_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_end_tag_seconds_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_end_tag_coarse_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= timetag_core_acq_end_tag_fine_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Timetag seconds
  timetag_core_seconds_o <= wrdata_reg(31 downto 0);
-- Timetag coarse time
  timetag_core_coarse_o <= wrdata_reg(31 downto 0);
-- Trigger time-tag metadata
-- Trigger time-tag seconds
-- Trigger time-tag coarse time
-- Trigger time-tag fine time
-- Acquisition start time-tag metadata
-- Acquisition start time-tag seconds
-- Acquisition start time-tag coarse time
-- Acquisition start time-tag fine time
-- Acquisition stop time-tag metadata
-- Acquisition stop time-tag seconds
-- Acquisition stop time-tag coarse time
-- Acquisition stop time-tag fine time
-- Acquisition end time-tag metadata
-- Acquisition end time-tag seconds
-- Acquisition end time-tag coarse time
-- Acquisition end time-tag fine time
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
